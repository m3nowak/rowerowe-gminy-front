{
    "pipes": [],
    "interfaces": [
        {
            "name": "AdmInfo",
            "id": "interface-AdmInfo-51da72f5e1f6788e4a980f461042b8e006b6d2eea80cf1bbbb09dc197c08c5d2d349dc76ad557dc6fafabe05aba4161563d97e6e1754591abc552324ac8b31c6",
            "file": "src/app/models/adm-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdmInfo {\n  TERYT: string;\n  name: string;\n  area: number;\n  population: number;\n  link: string;\n  coa_link: string;\n  type: string;\n  has_one_child: boolean;\n  only_child: boolean;\n  subtypeDigit?: number;\n}\n",
            "properties": [
                {
                    "name": "area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "coa_link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "has_one_child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "only_child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "population",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "subtypeDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "TERYT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ApiConfigurationParams",
            "id": "interface-ApiConfigurationParams-d83adeac9857e62bc1a8bf06098ec43a4701f1cacfab3345c2e1b350b613ad58e53646a869b19a5495dc5dad0fb48ebcb32cc16b6780ae8cca5172ba69ed5ea6",
            "file": "src/app/api/api-configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "properties": [
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Parameters for <code>ApiModule.forRoot()</code></p>\n",
            "rawdescription": "\n\nParameters for `ApiModule.forRoot()`\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
            "id": "interface-ApiUserUserIdUnlockedGetUserUnlocked$Params-f8a6543bfe58a5ceb853eb7511ec5a079d40ae109d640e07fb5e230d7bbd7b7fd4ca4440b38484c39f49a447f7c1e5909bbe2da21e5d88d26f55c18bd847e615",
            "file": "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\n\nexport interface ApiUserUserIdUnlockedGetUserUnlocked$Params {\n  user_id: number;\n}\n\nexport function apiUserUserIdUnlockedGetUserUnlocked(http: HttpClient, rootUrl: string, params: ApiUserUserIdUnlockedGetUserUnlocked$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {\n  const rb = new RequestBuilder(rootUrl, apiUserUserIdUnlockedGetUserUnlocked.PATH, 'get');\n  if (params) {\n    rb.path('user_id', params.user_id, {});\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<Array<string>>;\n    })\n  );\n}\n\napiUserUserIdUnlockedGetUserUnlocked.PATH = '/api/user/{user_id}/unlocked';\n",
            "properties": [
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Athlete",
            "id": "interface-Athlete-4cec0653f7bcd62deafc21ac8b15ddc16ee42720c2db8d36e755bb2d96a14068949313a18da512024a812b731eff504a4028fe22441db1fad91a22a69199ee3c",
            "file": "src/app/models/athlete.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DateTime } from 'luxon';\n\nexport interface Athlete {\n  id: number;\n  createdAt: DateTime;\n  lastBacklogSync?: DateTime;\n  backlogSyncEligible: boolean;\n  stravaAccountCreatedAt: DateTime;\n}\n",
            "properties": [
                {
                    "name": "backlogSyncEligible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastBacklogSync",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stravaAccountCreatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateTime",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AthleteDetail",
            "id": "interface-AthleteDetail-11de6ecee6971f8fdeeabe2eab2a9047627201922b7cd84ff61110f75daac07eea5b22c0bed67f09c210d556e817406c003be8895c72f4fe8561b6308de7462c",
            "file": "src/app/api/models/athlete-detail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AthleteDetail {\n  backlogSyncEligible: boolean;\n  createdAt: string;\n  id: number;\n  lastBacklogSync: (string | null);\n  stravaAccountCreatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "backlogSyncEligible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastBacklogSync",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "stravaAccountCreatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthenticateAuthenticate$Params",
            "id": "interface-AuthenticateAuthenticate$Params-36a2aad82bf855b477dcb27293727ef3e471ad18561e53b338c775564954a511360295dfa1f8116adcfc9c2aceb60dcdeab4bb65212b64ce97ac56141a1a18e5",
            "file": "src/app/api/fn/operations/authenticate-authenticate.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { StravaAuthResponse } from '../../models/strava-auth-response';\n\nexport interface AuthenticateAuthenticate$Params {\n  code: string;\n}\n\nexport function authenticateAuthenticate(\n  http: HttpClient,\n  rootUrl: string,\n  params: AuthenticateAuthenticate$Params,\n  context?: HttpContext,\n): Observable<StrictHttpResponse<StravaAuthResponse>> {\n  const rb = new RequestBuilder(rootUrl, authenticateAuthenticate.PATH, 'get');\n  if (params) {\n    rb.query('code', params.code, {});\n  }\n\n  return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<StravaAuthResponse>;\n    }),\n  );\n}\n\nauthenticateAuthenticate.PATH = '/authenticate';\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthResposeErr",
            "id": "interface-AuthResposeErr-ef4590c8dca6a3a3aa3473159bce35f2600ef9f13c3fb61c29025faf844573c27c9fed8e5ea1a58b41fc213b270352c6d9b9a62bb7d4b526b7026d8e4405b87c",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { computed, effect, inject, Injectable, signal } from '@angular/core';\nimport { Params, Router } from '@angular/router';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { environment } from '../../environments/environment';\nimport { AuthService as ApiAuthService } from '../api/services';\nimport * as jose from 'jose';\nimport { DateTime } from 'luxon';\nimport { LoginResponseError, StravaScopes } from '../api/models';\nimport { catchError, map, Observable } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nconst TOKEN_KEY = 'authToken';\n\n// export interface AuthRespose {\n//   success: boolean;\n//   isFirstLogin?: boolean;\n//   errorCode?: string;\n// }\n\nexport interface AuthResposeOK {\n  success: true;\n  isFirstLogin: boolean;\n}\n\nexport interface AuthResposeErr {\n  success: false;\n  errorCode: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'ExtAuth' },\n  });\n  authSvc = inject(ApiAuthService);\n  router = inject(Router);\n\n  currentToken = signal<string | undefined>(localStorage.getItem(TOKEN_KEY) ?? undefined);\n\n  localStorageEffect = effect(() => {\n    const token = this.currentToken();\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  });\n\n  loginExpiresAt = computed(() => {\n    const token = this.currentToken();\n    if (!token) return undefined;\n    const decoded = jose.decodeJwt(token);\n    if (decoded && decoded.exp) {\n      const expiration = DateTime.fromSeconds(decoded.exp);\n      return expiration;\n    }\n    return undefined;\n  });\n\n  isLoggedIn = computed(() => this.currentToken() !== undefined && !this.isExpired());\n\n  scopes = computed<string[]>(() => {\n    const token = this.currentToken();\n    if (!token) return [];\n    const decoded = jose.decodeJwt(token) as { extras?: { scopes?: string[] } };\n    if (decoded && decoded.extras && decoded.extras.scopes) {\n      return decoded.extras.scopes;\n    }\n    return [];\n  });\n\n  isExpired() {\n    const expiration = this.loginExpiresAt();\n    if (!expiration) return true;\n    const now = DateTime.utc();\n    return expiration < now;\n  }\n\n  logIn() {\n    const stravaUrl = new URL('http://www.strava.com/oauth/authorize');\n    stravaUrl.searchParams.set('client_id', environment.clientId);\n    stravaUrl.searchParams.set('response_type', 'code');\n    stravaUrl.searchParams.set('redirect_uri', environment.localBaseUrl + 'authorized');\n    stravaUrl.searchParams.set('approval_prompt', 'force');\n    stravaUrl.searchParams.set('scope', 'read,activity:read');\n    window.location.href = stravaUrl.href;\n  }\n\n  logOut() {\n    this.currentToken.set(undefined);\n    this.router.navigate(['']);\n  }\n\n  dumpTokenInfo() {\n    const token = this.currentToken();\n    if (!token) {\n      this.loggerSvc.info('No token found');\n      return;\n    }\n    const decoded = jose.decodeJwt(token);\n    this.loggerSvc.info('Token decoded:', decoded);\n    this.loggerSvc.info('Token expires at:', this.loginExpiresAt());\n    this.loggerSvc.info('Token expired:', this.isExpired());\n    this.loggerSvc.info('Token scopes:', this.scopes());\n    this.loggerSvc.info('UTC now:', DateTime.utc());\n  }\n\n  feedTokenResposive(code: string, scope: string): Observable<AuthResposeOK | AuthResposeErr> {\n    const stravaScopes = scope.split(',').map((scope) => scope as StravaScopes);\n\n    return this.authSvc.loginLoginPost({ body: { code, scopes: stravaScopes } }).pipe(\n      map((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n        return {\n          success: true as const,\n          isFirstLogin: res.isFirstLogin,\n        };\n      }),\n      catchError((err: HttpErrorResponse) => {\n        if (err.status !== 400) {\n          console.error('Error exchanging token:', err);\n          throw err;\n        }\n        const errInfo = err.error as LoginResponseError;\n        console.error('Error exchanging token:', err);\n        return [{ success: false as const, errorCode: errInfo.cause }];\n      }),\n    );\n  }\n\n  feedToken(params: Params) {\n    //example response:\n    //http://localhost:4200/exchange_token?state=&code=<TOKEN>&scope=read\n    this.loggerSvc.info('Token received:', params);\n    const code = params['code'];\n    const scopes = params['scope'].split(',');\n    if (code) {\n      this.authSvc.loginLoginPost({ body: { code, scopes } }).subscribe((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n      });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "errorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthResposeOK",
            "id": "interface-AuthResposeOK-ef4590c8dca6a3a3aa3473159bce35f2600ef9f13c3fb61c29025faf844573c27c9fed8e5ea1a58b41fc213b270352c6d9b9a62bb7d4b526b7026d8e4405b87c",
            "file": "src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { computed, effect, inject, Injectable, signal } from '@angular/core';\nimport { Params, Router } from '@angular/router';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { environment } from '../../environments/environment';\nimport { AuthService as ApiAuthService } from '../api/services';\nimport * as jose from 'jose';\nimport { DateTime } from 'luxon';\nimport { LoginResponseError, StravaScopes } from '../api/models';\nimport { catchError, map, Observable } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nconst TOKEN_KEY = 'authToken';\n\n// export interface AuthRespose {\n//   success: boolean;\n//   isFirstLogin?: boolean;\n//   errorCode?: string;\n// }\n\nexport interface AuthResposeOK {\n  success: true;\n  isFirstLogin: boolean;\n}\n\nexport interface AuthResposeErr {\n  success: false;\n  errorCode: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'ExtAuth' },\n  });\n  authSvc = inject(ApiAuthService);\n  router = inject(Router);\n\n  currentToken = signal<string | undefined>(localStorage.getItem(TOKEN_KEY) ?? undefined);\n\n  localStorageEffect = effect(() => {\n    const token = this.currentToken();\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  });\n\n  loginExpiresAt = computed(() => {\n    const token = this.currentToken();\n    if (!token) return undefined;\n    const decoded = jose.decodeJwt(token);\n    if (decoded && decoded.exp) {\n      const expiration = DateTime.fromSeconds(decoded.exp);\n      return expiration;\n    }\n    return undefined;\n  });\n\n  isLoggedIn = computed(() => this.currentToken() !== undefined && !this.isExpired());\n\n  scopes = computed<string[]>(() => {\n    const token = this.currentToken();\n    if (!token) return [];\n    const decoded = jose.decodeJwt(token) as { extras?: { scopes?: string[] } };\n    if (decoded && decoded.extras && decoded.extras.scopes) {\n      return decoded.extras.scopes;\n    }\n    return [];\n  });\n\n  isExpired() {\n    const expiration = this.loginExpiresAt();\n    if (!expiration) return true;\n    const now = DateTime.utc();\n    return expiration < now;\n  }\n\n  logIn() {\n    const stravaUrl = new URL('http://www.strava.com/oauth/authorize');\n    stravaUrl.searchParams.set('client_id', environment.clientId);\n    stravaUrl.searchParams.set('response_type', 'code');\n    stravaUrl.searchParams.set('redirect_uri', environment.localBaseUrl + 'authorized');\n    stravaUrl.searchParams.set('approval_prompt', 'force');\n    stravaUrl.searchParams.set('scope', 'read,activity:read');\n    window.location.href = stravaUrl.href;\n  }\n\n  logOut() {\n    this.currentToken.set(undefined);\n    this.router.navigate(['']);\n  }\n\n  dumpTokenInfo() {\n    const token = this.currentToken();\n    if (!token) {\n      this.loggerSvc.info('No token found');\n      return;\n    }\n    const decoded = jose.decodeJwt(token);\n    this.loggerSvc.info('Token decoded:', decoded);\n    this.loggerSvc.info('Token expires at:', this.loginExpiresAt());\n    this.loggerSvc.info('Token expired:', this.isExpired());\n    this.loggerSvc.info('Token scopes:', this.scopes());\n    this.loggerSvc.info('UTC now:', DateTime.utc());\n  }\n\n  feedTokenResposive(code: string, scope: string): Observable<AuthResposeOK | AuthResposeErr> {\n    const stravaScopes = scope.split(',').map((scope) => scope as StravaScopes);\n\n    return this.authSvc.loginLoginPost({ body: { code, scopes: stravaScopes } }).pipe(\n      map((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n        return {\n          success: true as const,\n          isFirstLogin: res.isFirstLogin,\n        };\n      }),\n      catchError((err: HttpErrorResponse) => {\n        if (err.status !== 400) {\n          console.error('Error exchanging token:', err);\n          throw err;\n        }\n        const errInfo = err.error as LoginResponseError;\n        console.error('Error exchanging token:', err);\n        return [{ success: false as const, errorCode: errInfo.cause }];\n      }),\n    );\n  }\n\n  feedToken(params: Params) {\n    //example response:\n    //http://localhost:4200/exchange_token?state=&code=<TOKEN>&scope=read\n    this.loggerSvc.info('Token received:', params);\n    const code = params['code'];\n    const scopes = params['scope'].split(',');\n    if (code) {\n      this.authSvc.loginLoginPost({ body: { code, scopes } }).subscribe((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n      });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "isFirstLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BacklogActivitiesBacklogPost$Params",
            "id": "interface-BacklogActivitiesBacklogPost$Params-5bbcf6bd86bda766621ca614e6291dfdc03013764dd4d9e0efdab7937b69e54d41ac13bfc558a6a7ebcf135f3fe8768025fe2ef854888214086f8196e45f7a0d",
            "file": "src/app/api/fn/activities/backlog-activities-backlog-post.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { BacklogRequest } from '../../models/backlog-request';\n\nexport interface BacklogActivitiesBacklogPost$Params {\n      body: BacklogRequest\n}\n\nexport function backlogActivitiesBacklogPost(http: HttpClient, rootUrl: string, params: BacklogActivitiesBacklogPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\n  const rb = new RequestBuilder(rootUrl, backlogActivitiesBacklogPost.PATH, 'post');\n  if (params) {\n    rb.body(params.body, 'application/json');\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<string>;\n    })\n  );\n}\n\nbacklogActivitiesBacklogPost.PATH = '/activities/backlog';\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BacklogRequest",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BacklogRequest",
            "id": "interface-BacklogRequest-d8f9d67954cdb3464b0b7baa988fd3c61b1fbef54f44bc0c1e222065c5569f7543e6d01096abada17bfe7ca090bfb1629b63523442ffa18498794ab27ac6019d",
            "file": "src/app/api/models/backlog-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface BacklogRequest {\n  periodFrom: string;\n  periodTo: string;\n}\n",
            "properties": [
                {
                    "name": "periodFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "periodTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetLoggedInUserAthletesMeGet$Params",
            "id": "interface-GetLoggedInUserAthletesMeGet$Params-aa5bdbe6b02271900167fef8405b64e452fbac1d6e4faafd7c26fcc3115b0418815dfbb89316bd6d059a66f10d2da25e9e1556d217bd3e1f733dbfe12581e68f",
            "file": "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { AthleteDetail } from '../../models/athlete-detail';\n\nexport interface GetLoggedInUserAthletesMeGet$Params {\n}\n\nexport function getLoggedInUserAthletesMeGet(http: HttpClient, rootUrl: string, params?: GetLoggedInUserAthletesMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<AthleteDetail>> {\n  const rb = new RequestBuilder(rootUrl, getLoggedInUserAthletesMeGet.PATH, 'get');\n  if (params) {\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<AthleteDetail>;\n    })\n  );\n}\n\ngetLoggedInUserAthletesMeGet.PATH = '/athletes/me';\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "HcHcHandler$Params",
            "id": "interface-HcHcHandler$Params-54232f00bafed624bc38cdc1f7a1570b926b9c89ec57561a001b1c3d5ee6ec02a70271c2c857f2a78bf7a07fbb189a77c207ac360fe28a48a8188ade766c3ef7",
            "file": "src/app/api/fn/internals/hc-hc-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\n\nexport interface HcHcHandler$Params {\n}\n\nexport function hcHcHandler(http: HttpClient, rootUrl: string, params?: HcHcHandler$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\n  const rb = new RequestBuilder(rootUrl, hcHcHandler.PATH, 'get');\n  if (params) {\n  }\n\n  return http.request(\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<string>;\n    })\n  );\n}\n\nhcHcHandler.PATH = '/hc';\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "HealthHealthGet$Params",
            "id": "interface-HealthHealthGet$Params-f53535c75bc2a9ec1f012c00ef093b239c399fc6573eae2889e6371379250ab6b5f7216b4704143e1016e026bd740f18993bb705cb8a27a88ec50e3d9c8bfd4c",
            "file": "src/app/api/fn/health/health-health-get.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\n\nexport interface HealthHealthGet$Params {\n}\n\nexport function healthHealthGet(http: HttpClient, rootUrl: string, params?: HealthHealthGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {\n  const rb = new RequestBuilder(rootUrl, healthHealthGet.PATH, 'get');\n  if (params) {\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<any>;\n    })\n  );\n}\n\nhealthHealthGet.PATH = '/health';\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "HttpValidationError",
            "id": "interface-HttpValidationError-f43c874b92451d970047879e2d367671baf6f75d76a5952802e3f459690958b24ef03ebd70c0f137743130e331384df054f762939d393731967bdf2e040e08a0",
            "file": "src/app/api/models/http-validation-error.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidationError } from '../models/validation-error';\nexport interface HttpValidationError {\n  detail?: Array<ValidationError>;\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ValidationError>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoadingInfo",
            "id": "interface-LoadingInfo-582b438c6ab8fb3fcfef4859586917218f7363ab73720e7a6ff492c2fdfc7bf7184e8acd6f4669a001d40f46948a60543b73368dd0f4c26e8a4a6c6b0250b9b3",
            "file": "src/app/models/loading_info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoadingInfo {\n  total: number;\n  loaded: number;\n}\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginLoginPost$Params",
            "id": "interface-LoginLoginPost$Params-3736aa707345d17ec2aada1726b5fe222e3cadd5f03188cb5be5c7af7d66cf05da282e6c4369945ce08b38aafa8c6780d49e3808f6b60284abde0a928c90646c",
            "file": "src/app/api/fn/auth/login-login-post.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { LoginRequest } from '../../models/login-request';\nimport { LoginResponse } from '../../models/login-response';\n\nexport interface LoginLoginPost$Params {\n      body: LoginRequest\n}\n\nexport function loginLoginPost(http: HttpClient, rootUrl: string, params: LoginLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<LoginResponse>> {\n  const rb = new RequestBuilder(rootUrl, loginLoginPost.PATH, 'post');\n  if (params) {\n    rb.body(params.body, 'application/json');\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<LoginResponse>;\n    })\n  );\n}\n\nloginLoginPost.PATH = '/login';\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginRequest",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-d639abe46eac32ce5492f5dd3588bd6d17994f7f090e39cc706c82617c91564a4649b0378539b111bc5d5fa4fb944f4d2d7039b3d1484a0f7dfeed404641ae87",
            "file": "src/app/api/models/login-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StravaScopes } from '../models/strava-scopes';\nexport interface LoginRequest {\n  code: string;\n  rememberLonger?: boolean;\n  scopes: Array<StravaScopes>;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rememberLonger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "scopes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StravaScopes>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-1087462f5950c347aefa4f93cd36fb892c64fc0fdde3d02c92927cc1e33993070dc18c786922666888a12ed9adf84e77d1ba04a8f526b2ea904fb807583999ef",
            "file": "src/app/api/models/login-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginResponse {\n  access_token: string;\n  isFirstLogin: boolean;\n  token_type?: string;\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isFirstLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponseError",
            "id": "interface-LoginResponseError-585bc788aacfa7050b57cacf7ba2a6cc689c5a1334db128556163b2e91c016e47af44046faaef88b2adaeadc8f581355c197de47b6b89af8d9d4e83be9eea353",
            "file": "src/app/api/models/login-response-error.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoginErrorCause } from '../models/login-error-cause';\nexport interface LoginResponseError {\n  cause: LoginErrorCause;\n}\n",
            "properties": [
                {
                    "name": "cause",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginErrorCause",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MapDisplaySettings",
            "id": "interface-MapDisplaySettings-a3f3d0e3adc77af1ed337268c6e18b8a6c41dc299537cb4b7afe67378665474aa13e6e90490a8059b229c6dd84c57185537374f9623d0d92d84b0f3e51116dad",
            "file": "src/app/models/map-display-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MapDisplaySettings {\n  opacity: number;\n  hueRotation: number;\n  brightnessMin: number;\n  brightnessMax: number;\n  saturation: number;\n  contrast: number;\n}\n",
            "properties": [
                {
                    "name": "brightnessMax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "brightnessMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "contrast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "hueRotation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NamedFeatureCollection",
            "id": "interface-NamedFeatureCollection-fc2c908d4b61b94021dd52c8c9467fe6187f1b97e241e506c506c44117ab7d4737d14fdd04684f8b9a71035e264467b7dfe87af2bebae85647b0abffa9421a05",
            "file": "src/app/models/geo-ext.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FeatureCollection } from 'geojson';\n\nexport interface NamedFeatureCollection {\n  name: string;\n  features: FeatureCollection;\n}\n",
            "properties": [
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FeatureCollection",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ParameterOptions",
            "id": "interface-ParameterOptions-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "explode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Defines the options for appending a parameter</p>\n",
            "rawdescription": "\n\nDefines the options for appending a parameter\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "RateLimitsRateLimitsHandler$Params",
            "id": "interface-RateLimitsRateLimitsHandler$Params-78b69d5c002160befbbf34976762008e957fef1c1bfe3751bffeef345a5a27e9c0dd1ea1662790631932354ed05a60b770eafc1569bd34b015c79aed96525b05",
            "file": "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { RateLimitSet } from '../../models/rate-limit-set';\n\nexport interface RateLimitsRateLimitsHandler$Params {\n}\n\nexport function rateLimitsRateLimitsHandler(http: HttpClient, rootUrl: string, params?: RateLimitsRateLimitsHandler$Params, context?: HttpContext): Observable<StrictHttpResponse<(null | RateLimitSet)>> {\n  const rb = new RequestBuilder(rootUrl, rateLimitsRateLimitsHandler.PATH, 'get');\n  if (params) {\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<(null | RateLimitSet)>;\n    })\n  );\n}\n\nrateLimitsRateLimitsHandler.PATH = '/rate-limits';\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "StravaInfo",
            "id": "interface-StravaInfo-43c3c305ccd5ca0073ab2eea1c2814521f52badf715aa1e21bb9285cf2721aca93ea005f9854269f393b58d08e2cdba0534f7dbd9072e8c4907aefdbc5f750b8",
            "file": "src/app/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StravaInfo {\n  profilePic?: string;\n  profilePicMedium?: string;\n  username?: string;\n  id: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "profilePic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "profilePicMedium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
            "id": "interface-UnlockedDetailRegionsUnlockedRegionIdGet$Params-ddf9fbacbb098af8927330bb6d6b3569d21586dc8c9e9d44578742bf4731a2bcf29ce01356bf9e4ff05c1552fbf202fefd8ff5e2a0ad56c42b47d7b202397d4b",
            "file": "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { UnlockedRegionDetail } from '../../models/unlocked-region-detail';\n\nexport interface UnlockedDetailRegionsUnlockedRegionIdGet$Params {\n  region_id: string;\n}\n\nexport function unlockedDetailRegionsUnlockedRegionIdGet(http: HttpClient, rootUrl: string, params: UnlockedDetailRegionsUnlockedRegionIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UnlockedRegionDetail>> {\n  const rb = new RequestBuilder(rootUrl, unlockedDetailRegionsUnlockedRegionIdGet.PATH, 'get');\n  if (params) {\n    rb.path('region_id', params.region_id, {});\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<UnlockedRegionDetail>;\n    })\n  );\n}\n\nunlockedDetailRegionsUnlockedRegionIdGet.PATH = '/regions/unlocked/{region_id}';\n",
            "properties": [
                {
                    "name": "region_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UnlockedRegion",
            "id": "interface-UnlockedRegion-f7dc5f5ba8dd58efe3bed1d92f088eb6d6a2ddb306227481783ae1e3d16e0b718a2a6c4af799d789ddea2854f55d038d2d15c8b20d117301dc6e8060282bdde2",
            "file": "src/app/api/models/unlocked-region.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UnlockedRegion {\n  regionId: string;\n}\n",
            "properties": [
                {
                    "name": "regionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UnlockedRegionDetail",
            "id": "interface-UnlockedRegionDetail-91298f72185bb23912954a7b8db9cbe84128c27d0ba55c9062b43bfb492cfc1f8361d6d32bf6025a519ef1c326b1339102ea1758b323cf1187fddb0b183c8201",
            "file": "src/app/api/models/unlocked-region-detail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UnlockedRegionDetail {\n  firstVisited?: (string | null);\n  lastActivityId?: (string | null);\n  lastVisited?: (string | null);\n  regionId: string;\n  visitedCount: number;\n}\n",
            "properties": [
                {
                    "name": "firstVisited",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastActivityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lastVisited",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "regionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visitedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UnlockedRegionsUnlockedGet$Params",
            "id": "interface-UnlockedRegionsUnlockedGet$Params-6f161ed2b127f8d1b2f9f8f1bb2074408fda0468231c0a50d496ec87df9dccdb44ed176ed74453b10fdd64649b8302c8083e1dd8883139c770136de141f67230",
            "file": "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\nimport { UnlockedRegion } from '../../models/unlocked-region';\n\nexport interface UnlockedRegionsUnlockedGet$Params {\n}\n\nexport function unlockedRegionsUnlockedGet(http: HttpClient, rootUrl: string, params?: UnlockedRegionsUnlockedGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnlockedRegion>>> {\n  const rb = new RequestBuilder(rootUrl, unlockedRegionsUnlockedGet.PATH, 'get');\n  if (params) {\n  }\n\n  return http.request(\n    rb.build({ responseType: 'json', accept: 'application/json', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return r as StrictHttpResponse<Array<UnlockedRegion>>;\n    })\n  );\n}\n\nunlockedRegionsUnlockedGet.PATH = '/regions/unlocked';\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ValidationError",
            "id": "interface-ValidationError-4e8932649cf5c078e30e8d55012cb2c3cfeae67138fbe459315110ce1928e2b7c0f14f3e618c0e27714d8315fe45d301a2417636877ca0b02a5b91cca644711c",
            "file": "src/app/api/models/validation-error.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ValidationError {\n  loc: Array<(string | number)>;\n  msg: string;\n  type: string;\n}\n",
            "properties": [
                {
                    "name": "loc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string | number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ActivitiesService",
            "id": "injectable-ActivitiesService-cf9454eca4b4e553b8a994b687c5de1b379c67718d79aacc1eb13054a78d2d74954b68145f0c10398a958ca105c0cb735836076581976e52a1a7932be3923917",
            "file": "src/app/api/services/activities.service.ts",
            "properties": [
                {
                    "name": "BacklogActivitiesBacklogPostPath",
                    "defaultValue": "'/activities/backlog'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>backlogActivitiesBacklogPost()</code></p>\n",
                    "line": 22,
                    "rawdescription": "\nPath part for operation `backlogActivitiesBacklogPost()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "backlogActivitiesBacklogPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBacklog.\n\n\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `backlogActivitiesBacklogPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>Backlog.</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>backlogActivitiesBacklogPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "backlogActivitiesBacklogPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBacklog.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `backlogActivitiesBacklogPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>Backlog.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>backlogActivitiesBacklogPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { backlogActivitiesBacklogPost } from '../fn/activities/backlog-activities-backlog-post';\nimport { BacklogActivitiesBacklogPost$Params } from '../fn/activities/backlog-activities-backlog-post';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivitiesService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `backlogActivitiesBacklogPost()` */\n  static readonly BacklogActivitiesBacklogPostPath = '/activities/backlog';\n\n  /**\n   * Backlog.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `backlogActivitiesBacklogPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  backlogActivitiesBacklogPost$Response(params: BacklogActivitiesBacklogPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\n    return backlogActivitiesBacklogPost(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Backlog.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `backlogActivitiesBacklogPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  backlogActivitiesBacklogPost(params: BacklogActivitiesBacklogPost$Params, context?: HttpContext): Observable<string> {\n    return this.backlogActivitiesBacklogPost$Response(params, context).pipe(\n      map((r: StrictHttpResponse<string>): string => r.body)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseService"
            ],
            "type": "injectable"
        },
        {
            "name": "ActivityService",
            "id": "injectable-ActivityService-0eddf3f0ac68221ecc552fd8d62329d1829f54ca4e5a291f7655bb9dcc867d4db95631b6e6c5370a80d59d0f1af748998f14704a4f9e076dbd026bc024201240",
            "file": "src/app/services/activity.service.ts",
            "properties": [
                {
                    "name": "apiActivitiesSvc",
                    "defaultValue": "inject(ApiActivitiesService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "triggerBacklog",
                    "args": [
                        {
                            "name": "dateFrom",
                            "type": "DateTime<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateFrom",
                            "type": "DateTime<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { ActivitiesService as ApiActivitiesService } from '../api/services';\nimport { DateTime } from 'luxon';\nimport { map, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActivityService {\n  apiActivitiesSvc = inject(ApiActivitiesService);\n\n  triggerBacklog(dateFrom: DateTime<true>): Observable<void> {\n    return this.apiActivitiesSvc\n      .backlogActivitiesBacklogPost({\n        body: { periodFrom: dateFrom.toUTC().toISO(), periodTo: DateTime.now().toUTC().toISO() },\n      })\n      .pipe(\n        map(() => {\n          return;\n        }),\n      );\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AdmService",
            "id": "injectable-AdmService-dbcd92e9a85e1274daebd1782147aa633be98a071321d05dfcddf6239829e416493a15fab6bbe804e572d33730f871a471c9f1d713a70e604f69ea063fe0bc4c",
            "file": "src/app/services/adm.service.ts",
            "properties": [
                {
                    "name": "_loadProgress",
                    "defaultValue": "signal<LoadingInfo | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "admInfo",
                    "defaultValue": "signal<Map<string, AdmInfo> | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downloadStarted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downloadSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "computed(() => this.admInfo() !== undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loadProgress",
                    "defaultValue": "computed(() => this._loadProgress())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'AdmService' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "progressSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_startDownload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "buildAdmInfoMap",
                    "args": [
                        {
                            "name": "admInfo",
                            "type": "AdmInfo[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<string, AdmInfo>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "admInfo",
                            "type": "AdmInfo[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdmInfo",
                    "args": [
                        {
                            "name": "regionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AdmInfo | undefined",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startDownload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "youForgotPoland",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpEventType, HttpProgressEvent, HttpRequest } from '@angular/common/http';\nimport { computed, inject, Injectable, OnDestroy, signal } from '@angular/core';\nimport { filter, of, shareReplay, Subscription, switchMap, tap } from 'rxjs';\nimport { AdmInfo } from '../models/adm-info';\nimport { environment } from '../../environments/environment';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { LoadingInfo } from '../models/loading_info';\nimport { gunzip } from '../utils/gunzip';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdmService implements OnDestroy {\n  private http = inject(HttpClient);\n\n  private loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'AdmService' },\n  });\n\n  private admInfo = signal<Map<string, AdmInfo> | undefined>(undefined);\n\n  isAvailable = computed(() => this.admInfo() !== undefined);\n\n  private _loadProgress = signal<LoadingInfo | undefined>(undefined);\n\n  loadProgress = computed(() => this._loadProgress());\n\n  private downloadStarted = false;\n  private progressSub: Subscription | undefined;\n  private downloadSub: Subscription | undefined;\n\n  startDownload() {\n    if (!this.downloadStarted) {\n      this.downloadStarted = true;\n      this._startDownload();\n    }\n  }\n\n  getAdmInfo(regionId: string): AdmInfo | undefined {\n    const admInfo = this.admInfo();\n    const regionIdshort = regionId.substring(0, 6);\n    if (admInfo) {\n      return admInfo.get(regionIdshort);\n    }\n    return undefined;\n  }\n\n  private _startDownload() {\n    const request = new HttpRequest<Blob>('GET', environment.admInfoUrl, {\n      reportProgress: true,\n      responseType: 'blob',\n    });\n    const request$ = this.http.request<Blob>(request).pipe(shareReplay(1));\n    this.progressSub = request$\n      .pipe(filter((event) => event.type === HttpEventType.DownloadProgress))\n      .subscribe((event) => {\n        const eventCast = event as HttpProgressEvent;\n        const total = eventCast.total;\n        if (total) {\n          this._loadProgress.set({ total: total, loaded: eventCast.loaded });\n        }\n        this.loggerSvc.info('Download progress', eventCast.loaded, total);\n      });\n\n    this.downloadSub = request$\n      .pipe(\n        filter((event) => event.type === HttpEventType.Response),\n        switchMap((event) => (event.body ? gunzip<AdmInfo[]>(event.body) : of(undefined))),\n        tap((ail) => {\n          this.loggerSvc.info('Data received', ail);\n        }),\n      )\n      .subscribe((admInfoList) => {\n        if (admInfoList) {\n          this.admInfo.set(this.buildAdmInfoMap(admInfoList));\n          this.youForgotPoland();\n          this._loadProgress.update((lp) => {\n            if (lp) {\n              return { total: lp.total, loaded: lp.total };\n            } else {\n              return lp;\n            }\n          });\n        } else {\n          this.loggerSvc.error('No data received');\n        }\n      });\n  }\n  private buildAdmInfoMap(admInfo: AdmInfo[]): Map<string, AdmInfo> {\n    return new Map(\n      admInfo.map((ai) => {\n        let teryt = ai.TERYT;\n        let typeDigit = undefined;\n        if (teryt.length === 7) {\n          typeDigit = Number(teryt[teryt.length - 1]);\n          teryt = teryt.substring(0, 6);\n        }\n        return [teryt, { ...ai, subtypeDigit: typeDigit }];\n      }),\n    );\n  }\n\n  private youForgotPoland() {\n    this.admInfo.update((admInfo) => {\n      if (admInfo) {\n        admInfo.set('', {\n          TERYT: '',\n          name: 'Polska',\n          area: 312696,\n          population: 37636508,\n          link: 'wiki/Polska',\n          coa_link: '0.svg',\n          type: 'PAN',\n          has_one_child: false,\n          only_child: false,\n        });\n      }\n      return admInfo;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.downloadSub) {\n      this.downloadSub.unsubscribe();\n    }\n    if (this.progressSub) {\n      this.progressSub.unsubscribe();\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ApiConfiguration",
            "id": "injectable-ApiConfiguration-d83adeac9857e62bc1a8bf06098ec43a4701f1cacfab3345c2e1b350b613ad58e53646a869b19a5495dc5dad0fb48ebcb32cc16b6780ae8cca5172ba69ed5ea6",
            "file": "src/app/api/api-configuration.ts",
            "properties": [
                {
                    "name": "rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Global configuration</p>\n",
            "rawdescription": "\n\nGlobal configuration\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AthleteService",
            "id": "injectable-AthleteService-83f6e5e08b2ab8046fe4a531fb3331054437433444de0f6f453d91fd030aaffd465d57598a8fee006a81fe1d991a2442edc698ba1cd24ff2cf3a3a2b081b70d3",
            "file": "src/app/services/athlete.service.ts",
            "properties": [
                {
                    "name": "apiAthleteSvc",
                    "defaultValue": "inject(ApiAthleteService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getCurrentAthlete",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Athlete>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { AthletesService as ApiAthleteService } from '../api/services';\nimport { map, Observable } from 'rxjs';\nimport { Athlete } from '../models/athlete';\nimport { DateTime } from 'luxon';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AthleteService {\n  apiAthleteSvc = inject(ApiAthleteService);\n\n  getCurrentAthlete(): Observable<Athlete> {\n    return this.apiAthleteSvc.getLoggedInUserAthletesMeGet().pipe(\n      map((response) => ({\n        id: response.id,\n        createdAt: DateTime.fromISO(response.createdAt),\n        lastBacklogSync: response.lastBacklogSync\n          ? DateTime.fromISO(response.lastBacklogSync)\n          : undefined,\n        backlogSyncEligible: response.backlogSyncEligible,\n        stravaAccountCreatedAt: DateTime.fromISO(response.stravaAccountCreatedAt),\n      })),\n    );\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AthletesService",
            "id": "injectable-AthletesService-31bf1143653c4f15416b79e8b94d88a43d3c046e15a5add93fbc505576bebf142cfd4934f5f2d2eede2f5059c981ccf831b95e77b64057f9841da33ac7966033",
            "file": "src/app/api/services/athletes.service.ts",
            "properties": [
                {
                    "name": "GetLoggedInUserAthletesMeGetPath",
                    "defaultValue": "'/athletes/me'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>getLoggedInUserAthletesMeGet()</code></p>\n",
                    "line": 23,
                    "rawdescription": "\nPath part for operation `getLoggedInUserAthletesMeGet()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLoggedInUserAthletesMeGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AthleteDetail>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet Logged In User.\n\n\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `getLoggedInUserAthletesMeGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Get Logged In User.</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>getLoggedInUserAthletesMeGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoggedInUserAthletesMeGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<AthleteDetail>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet Logged In User.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getLoggedInUserAthletesMeGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Get Logged In User.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getLoggedInUserAthletesMeGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { AthleteDetail } from '../models/athlete-detail';\nimport { getLoggedInUserAthletesMeGet } from '../fn/athletes/get-logged-in-user-athletes-me-get';\nimport { GetLoggedInUserAthletesMeGet$Params } from '../fn/athletes/get-logged-in-user-athletes-me-get';\n\n@Injectable({ providedIn: 'root' })\nexport class AthletesService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `getLoggedInUserAthletesMeGet()` */\n  static readonly GetLoggedInUserAthletesMeGetPath = '/athletes/me';\n\n  /**\n   * Get Logged In User.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getLoggedInUserAthletesMeGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLoggedInUserAthletesMeGet$Response(params?: GetLoggedInUserAthletesMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<AthleteDetail>> {\n    return getLoggedInUserAthletesMeGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Get Logged In User.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getLoggedInUserAthletesMeGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLoggedInUserAthletesMeGet(params?: GetLoggedInUserAthletesMeGet$Params, context?: HttpContext): Observable<AthleteDetail> {\n    return this.getLoggedInUserAthletesMeGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<AthleteDetail>): AthleteDetail => r.body)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseService"
            ],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ef4590c8dca6a3a3aa3473159bce35f2600ef9f13c3fb61c29025faf844573c27c9fed8e5ea1a58b41fc213b270352c6d9b9a62bb7d4b526b7026d8e4405b87c",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "authSvc",
                    "defaultValue": "inject(ApiAuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "currentToken",
                    "defaultValue": "signal<string | undefined>(localStorage.getItem(TOKEN_KEY) ?? undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "computed(() => this.currentToken() !== undefined && !this.isExpired())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "localStorageEffect",
                    "defaultValue": "effect(() => {\n    const token = this.currentToken();\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'ExtAuth' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginExpiresAt",
                    "defaultValue": "computed(() => {\n    const token = this.currentToken();\n    if (!token) return undefined;\n    const decoded = jose.decodeJwt(token);\n    if (decoded && decoded.exp) {\n      const expiration = DateTime.fromSeconds(decoded.exp);\n      return expiration;\n    }\n    return undefined;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "scopes",
                    "defaultValue": "computed<string[]>(() => {\n    const token = this.currentToken();\n    if (!token) return [];\n    const decoded = jose.decodeJwt(token) as { extras?: { scopes?: string[] } };\n    if (decoded && decoded.extras && decoded.extras.scopes) {\n      return decoded.extras.scopes;\n    }\n    return [];\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [
                {
                    "name": "dumpTokenInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "feedToken",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "feedTokenResposive",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scope",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthResposeOK | AuthResposeErr>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scope",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpired",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { computed, effect, inject, Injectable, signal } from '@angular/core';\nimport { Params, Router } from '@angular/router';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { environment } from '../../environments/environment';\nimport { AuthService as ApiAuthService } from '../api/services';\nimport * as jose from 'jose';\nimport { DateTime } from 'luxon';\nimport { LoginResponseError, StravaScopes } from '../api/models';\nimport { catchError, map, Observable } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nconst TOKEN_KEY = 'authToken';\n\n// export interface AuthRespose {\n//   success: boolean;\n//   isFirstLogin?: boolean;\n//   errorCode?: string;\n// }\n\nexport interface AuthResposeOK {\n  success: true;\n  isFirstLogin: boolean;\n}\n\nexport interface AuthResposeErr {\n  success: false;\n  errorCode: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'ExtAuth' },\n  });\n  authSvc = inject(ApiAuthService);\n  router = inject(Router);\n\n  currentToken = signal<string | undefined>(localStorage.getItem(TOKEN_KEY) ?? undefined);\n\n  localStorageEffect = effect(() => {\n    const token = this.currentToken();\n    if (token) {\n      localStorage.setItem(TOKEN_KEY, token);\n    } else {\n      localStorage.removeItem(TOKEN_KEY);\n    }\n  });\n\n  loginExpiresAt = computed(() => {\n    const token = this.currentToken();\n    if (!token) return undefined;\n    const decoded = jose.decodeJwt(token);\n    if (decoded && decoded.exp) {\n      const expiration = DateTime.fromSeconds(decoded.exp);\n      return expiration;\n    }\n    return undefined;\n  });\n\n  isLoggedIn = computed(() => this.currentToken() !== undefined && !this.isExpired());\n\n  scopes = computed<string[]>(() => {\n    const token = this.currentToken();\n    if (!token) return [];\n    const decoded = jose.decodeJwt(token) as { extras?: { scopes?: string[] } };\n    if (decoded && decoded.extras && decoded.extras.scopes) {\n      return decoded.extras.scopes;\n    }\n    return [];\n  });\n\n  isExpired() {\n    const expiration = this.loginExpiresAt();\n    if (!expiration) return true;\n    const now = DateTime.utc();\n    return expiration < now;\n  }\n\n  logIn() {\n    const stravaUrl = new URL('http://www.strava.com/oauth/authorize');\n    stravaUrl.searchParams.set('client_id', environment.clientId);\n    stravaUrl.searchParams.set('response_type', 'code');\n    stravaUrl.searchParams.set('redirect_uri', environment.localBaseUrl + 'authorized');\n    stravaUrl.searchParams.set('approval_prompt', 'force');\n    stravaUrl.searchParams.set('scope', 'read,activity:read');\n    window.location.href = stravaUrl.href;\n  }\n\n  logOut() {\n    this.currentToken.set(undefined);\n    this.router.navigate(['']);\n  }\n\n  dumpTokenInfo() {\n    const token = this.currentToken();\n    if (!token) {\n      this.loggerSvc.info('No token found');\n      return;\n    }\n    const decoded = jose.decodeJwt(token);\n    this.loggerSvc.info('Token decoded:', decoded);\n    this.loggerSvc.info('Token expires at:', this.loginExpiresAt());\n    this.loggerSvc.info('Token expired:', this.isExpired());\n    this.loggerSvc.info('Token scopes:', this.scopes());\n    this.loggerSvc.info('UTC now:', DateTime.utc());\n  }\n\n  feedTokenResposive(code: string, scope: string): Observable<AuthResposeOK | AuthResposeErr> {\n    const stravaScopes = scope.split(',').map((scope) => scope as StravaScopes);\n\n    return this.authSvc.loginLoginPost({ body: { code, scopes: stravaScopes } }).pipe(\n      map((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n        return {\n          success: true as const,\n          isFirstLogin: res.isFirstLogin,\n        };\n      }),\n      catchError((err: HttpErrorResponse) => {\n        if (err.status !== 400) {\n          console.error('Error exchanging token:', err);\n          throw err;\n        }\n        const errInfo = err.error as LoginResponseError;\n        console.error('Error exchanging token:', err);\n        return [{ success: false as const, errorCode: errInfo.cause }];\n      }),\n    );\n  }\n\n  feedToken(params: Params) {\n    //example response:\n    //http://localhost:4200/exchange_token?state=&code=<TOKEN>&scope=read\n    this.loggerSvc.info('Token received:', params);\n    const code = params['code'];\n    const scopes = params['scope'].split(',');\n    if (code) {\n      this.authSvc.loginLoginPost({ body: { code, scopes } }).subscribe((res) => {\n        this.loggerSvc.info('Token exchanged:', res);\n        this.currentToken.set(res.access_token);\n      });\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ddcf452ba90604e41e15f94188495bf74a315949b0e71f0bd9f968738569080d7cc25e5a0b016b82e10d40d1799f9fde1e5df69dbd7c27d8ab47ec30ecdb9f63-1",
            "file": "src/app/api/services/auth.service.ts",
            "properties": [
                {
                    "name": "LoginLoginPostPath",
                    "defaultValue": "'/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>loginLoginPost()</code></p>\n",
                    "line": 23,
                    "rawdescription": "\nPath part for operation `loginLoginPost()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "loginLoginPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogin.\n\n\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `loginLoginPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>Login.</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>loginLoginPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loginLoginPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<LoginResponse>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogin.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `loginLoginPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>Login.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>loginLoginPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { loginLoginPost } from '../fn/auth/login-login-post';\nimport { LoginLoginPost$Params } from '../fn/auth/login-login-post';\nimport { LoginResponse } from '../models/login-response';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `loginLoginPost()` */\n  static readonly LoginLoginPostPath = '/login';\n\n  /**\n   * Login.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `loginLoginPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  loginLoginPost$Response(params: LoginLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<LoginResponse>> {\n    return loginLoginPost(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Login.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `loginLoginPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  loginLoginPost(params: LoginLoginPost$Params, context?: HttpContext): Observable<LoginResponse> {\n    return this.loginLoginPost$Response(params, context).pipe(\n      map((r: StrictHttpResponse<LoginResponse>): LoginResponse => r.body)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseService"
            ],
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AuthService-1"
        },
        {
            "name": "BaseService",
            "id": "injectable-BaseService-debf8ff29000cb8710720d4870bdd5d4ee14a8dc2ceff456243ae0220ec9377dd0688904001d8a0bd7bf9e9ebd6019bfe5fd84ec150ae400c9ed30c527af5f8d",
            "file": "src/app/api/base-service.ts",
            "properties": [
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Base class for services</p>\n",
            "rawdescription": "\n\nBase class for services\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl?: string;\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "rootUrl": {
                    "name": "rootUrl",
                    "setSignature": {
                        "name": "rootUrl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "rawdescription": "\n\nSets the root URL for API operations in this service.\n",
                        "description": "<p>Sets the root URL for API operations in this service.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "rootUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 24,
                        "rawdescription": "\n\nReturns the root url for all operations in this service. If not set directly in this\nservice, will fallback to `ApiConfiguration.rootUrl`.\n",
                        "description": "<p>Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to <code>ApiConfiguration.rootUrl</code>.</p>\n"
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BordersService",
            "id": "injectable-BordersService-e552d505657910883a95cd34a223c527a8c452bcd74bbad9d9f1a559d47b07cc5871974113e45a40d18b8890065aed81df701f727f82e6cc4bbaf10a19dbd49f",
            "file": "src/app/services/borders.service.ts",
            "properties": [
                {
                    "name": "_borderInfo",
                    "defaultValue": "signal<FeatureCollection | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_loadProgress",
                    "defaultValue": "signal<LoadingInfo | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "borderInfo",
                    "defaultValue": "computed(() => this._borderInfo())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "downloadStarted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downloadSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "computed(() => this._borderInfo() !== undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loadProgress",
                    "defaultValue": "computed(() => this._loadProgress())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'AdmService' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "progressSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_startDownload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startDownload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { computed, inject, Injectable, OnDestroy, signal } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpProgressEvent, HttpRequest } from '@angular/common/http';\nimport { filter, of, shareReplay, Subscription, switchMap } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nimport { FeatureCollection } from 'geojson';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { LoadingInfo } from '../models/loading_info';\nimport { gunzip } from '../utils/gunzip';\nimport { feature } from 'topojson-client';\nimport { Topology } from 'topojson-specification';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BordersService implements OnDestroy {\n  private http = inject(HttpClient);\n\n  private loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'AdmService' },\n  });\n\n  private _borderInfo = signal<FeatureCollection | undefined>(undefined);\n\n  borderInfo = computed(() => this._borderInfo());\n\n  isAvailable = computed(() => this._borderInfo() !== undefined);\n\n  private _loadProgress = signal<LoadingInfo | undefined>(undefined);\n\n  loadProgress = computed(() => this._loadProgress());\n\n  private downloadStarted = false;\n  private progressSub: Subscription | undefined;\n  private downloadSub: Subscription | undefined;\n\n  startDownload() {\n    if (!this.downloadStarted) {\n      this.downloadStarted = true;\n      this._startDownload();\n    }\n  }\n\n  private _startDownload() {\n    const request = new HttpRequest<Blob>('GET', environment.borderInfoUrl, {\n      reportProgress: true,\n      responseType: 'blob',\n    });\n    const request$ = this.http.request<Blob>(request).pipe(shareReplay(1));\n\n    this.progressSub = request$\n      .pipe(filter((event) => event.type === HttpEventType.DownloadProgress))\n      .subscribe((event) => {\n        const eventCast = event as HttpProgressEvent;\n        const total = eventCast.total;\n        if (total) {\n          this._loadProgress.set({ total: total, loaded: eventCast.loaded });\n        }\n        this.loggerSvc.info('Download progress', eventCast.loaded, total);\n      });\n\n    this.downloadSub = request$\n      .pipe(\n        filter((event) => event.type === HttpEventType.Response),\n        switchMap((event) => (event.body ? gunzip<Topology>(event.body) : of(undefined))),\n      )\n      .subscribe((tpl) => {\n        this.loggerSvc.info('Download completed');\n        this.loggerSvc.info(tpl);\n        const fc = tpl ? (feature(tpl, tpl.objects['data']) as FeatureCollection) : undefined;\n        if (fc) {\n          this._borderInfo.set(fc);\n          this._loadProgress.update((lp) => {\n            if (lp) {\n              return { total: lp.total, loaded: lp.total };\n            } else {\n              return lp;\n            }\n          });\n        } else {\n          this.loggerSvc.error('No data received');\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.downloadSub) {\n      this.downloadSub.unsubscribe();\n    }\n    if (this.progressSub) {\n      this.progressSub.unsubscribe();\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GeoFeatureDataService",
            "id": "injectable-GeoFeatureDataService-0eaccdaa6875deba9fe80f6d7619786cddc84e42d91f4abe8f7cdee0587464be3752ae6eb54a254bcf4ea992b1f74bd99d44301576845575644b728c3135a7da",
            "file": "src/app/services/geo-feature-data.service.ts",
            "properties": [
                {
                    "name": "authSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "borderInfoExt",
                    "defaultValue": "computed<FeatureCollection<Geometry, GeoJsonProperties> | undefined>(() => {\n    let unlockedFeatures = this.regionsSvc.currentUnlockedRegions();\n    if (!unlockedFeatures) {\n      unlockedFeatures = this.unlockedFeaturesDefault;\n    }\n    const allBorders = this.bordersSvc.borderInfo();\n    if (allBorders) {\n      const features_ext = allBorders.features.map((f) => {\n        const unlockedArea = unlockedFeatures.has(f.properties!['ID']) ? 'Y' : 'N';\n\n        return {\n          ...f,\n          properties: {\n            ...f.properties,\n            unlockedArea,\n          },\n        };\n      });\n      return {\n        ...allBorders,\n        features: features_ext,\n      };\n    } else {\n      return undefined;\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "bordersSvc",
                    "defaultValue": "inject(BordersService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "logEffect",
                    "defaultValue": "effect(() => {\n    const bie = this.borderInfoExt();\n    if (bie) {\n      this.loggerSvc.info('Extended border info updated, feature count =', bie.features.length);\n    } else {\n      this.loggerSvc.info('Extended border info not available');\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'GeoFeatureDataService' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "regionsSvc",
                    "defaultValue": "inject(RegionsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "unlockedFeaturesDefault",
                    "defaultValue": "new Set([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { computed, effect, inject, Injectable } from '@angular/core';\nimport { BordersService } from './borders.service';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { FeatureCollection, GeoJsonProperties, Geometry } from 'geojson';\nimport { AuthService } from './auth.service';\nimport { RegionsService } from './regions.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeoFeatureDataService {\n  bordersSvc = inject(BordersService);\n  authSvc = inject(AuthService);\n  regionsSvc = inject(RegionsService);\n  loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'GeoFeatureDataService' },\n  });\n\n  unlockedFeaturesDefault = new Set([]);\n\n  borderInfoExt = computed<FeatureCollection<Geometry, GeoJsonProperties> | undefined>(() => {\n    let unlockedFeatures = this.regionsSvc.currentUnlockedRegions();\n    if (!unlockedFeatures) {\n      unlockedFeatures = this.unlockedFeaturesDefault;\n    }\n    const allBorders = this.bordersSvc.borderInfo();\n    if (allBorders) {\n      const features_ext = allBorders.features.map((f) => {\n        const unlockedArea = unlockedFeatures.has(f.properties!['ID']) ? 'Y' : 'N';\n\n        return {\n          ...f,\n          properties: {\n            ...f.properties,\n            unlockedArea,\n          },\n        };\n      });\n      return {\n        ...allBorders,\n        features: features_ext,\n      };\n    } else {\n      return undefined;\n    }\n  });\n\n  logEffect = effect(() => {\n    const bie = this.borderInfoExt();\n    if (bie) {\n      this.loggerSvc.info('Extended border info updated, feature count =', bie.features.length);\n    } else {\n      this.loggerSvc.info('Extended border info not available');\n    }\n  });\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HealthService",
            "id": "injectable-HealthService-5bb7ffacbcfb21e9b84bd1cf7df5a60e475795455a8b30c0964df823bb77eb0a36e06acdcd41c447052ab10eb2f595cb4333b7516ed41eab1fa4b53c50e45606",
            "file": "src/app/api/services/health.service.ts",
            "properties": [
                {
                    "name": "HealthHealthGetPath",
                    "defaultValue": "'/health'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>healthHealthGet()</code></p>\n",
                    "line": 22,
                    "rawdescription": "\nPath part for operation `healthHealthGet()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "healthHealthGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHealth.\n\n\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `healthHealthGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Health.</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>healthHealthGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "healthHealthGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<any>>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHealth.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `healthHealthGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Health.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>healthHealthGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { healthHealthGet } from '../fn/health/health-health-get';\nimport { HealthHealthGet$Params } from '../fn/health/health-health-get';\n\n@Injectable({ providedIn: 'root' })\nexport class HealthService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `healthHealthGet()` */\n  static readonly HealthHealthGetPath = '/health';\n\n  /**\n   * Health.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `healthHealthGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  healthHealthGet$Response(params?: HealthHealthGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {\n    return healthHealthGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Health.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `healthHealthGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  healthHealthGet(params?: HealthHealthGet$Params, context?: HttpContext): Observable<any> {\n    return this.healthHealthGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<any>): any => r.body)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseService"
            ],
            "type": "injectable"
        },
        {
            "name": "MapDisplayService",
            "id": "injectable-MapDisplayService-faad691a425cf3912677bb7c65d179a53b40f5c2c72dfbeeda66954074237a8384f2b819367aef8197e187999ccc11638c10bf6b933822cf88ef6e3b0010f193",
            "file": "src/app/services/map-display.service.ts",
            "properties": [
                {
                    "name": "_currentSettings",
                    "defaultValue": "new BehaviorSubject<\n    StyleSpecification | undefined\n  >(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<StyleSpecification | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentSettings$",
                    "defaultValue": "this._currentSettings.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StyleSpecification | undefined>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "updateSettings",
                    "args": [
                        {
                            "name": "style",
                            "type": "MapDisplaySettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "style",
                            "type": "MapDisplaySettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { StyleSpecification } from 'maplibre-gl';\nimport { MapDisplaySettings } from '../models/map-display-settings';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MapDisplayService {\n  private _currentSettings: BehaviorSubject<StyleSpecification | undefined> = new BehaviorSubject<\n    StyleSpecification | undefined\n  >(undefined);\n  // private _currentSettings: WritableSignal<StyleSpecification | undefined> = signal(undefined)\n  currentSettings$: Observable<StyleSpecification | undefined> =\n    this._currentSettings.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.http.get<StyleSpecification>('/assets/map-style.json').subscribe((style) => {\n      this._currentSettings.next(style);\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.currentSettings$.subscribe((_) => {\n      console.log('MapDisplayService: current settings updated (info from observable)');\n    });\n  }\n\n  updateSettings(style: MapDisplaySettings) {\n    //find layer with osm id\n    const current = this._currentSettings.value;\n\n    if (!current) {\n      return;\n    }\n    const osmLayerIndex = 0;\n    const paint = {\n      'raster-hue-rotate': style.hueRotation,\n      'raster-opacity': style.opacity / 100,\n      'raster-brightness-min': style.brightnessMin / 100,\n      'raster-brightness-max': style.brightnessMax / 100,\n      'raster-saturation': style.saturation / 100,\n      'raster-contrast': style.contrast / 100,\n    };\n    current.layers[osmLayerIndex].paint = paint;\n    this._currentSettings.next(current);\n    console.log('MapDisplayService: updating map style');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegionsService",
            "id": "injectable-RegionsService-0c5fb95933a33c98ff6c2b839a1efd90a172223a71115636ab59eab96fd620044de047f2260fa564130edaba10334c54fd6d4445254032a073c619835cdbe40b",
            "file": "src/app/services/regions.service.ts",
            "properties": [
                {
                    "name": "apiRegionsSvc",
                    "defaultValue": "inject(ApiRegionsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "authSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "currentUnlockedRegions",
                    "defaultValue": "toSignal(\n    toObservable(this.authSvc.currentToken).pipe(\n      switchMap((token) => iif(() => !!token, this.unlockedRegions(), of(new Set<string>()))),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "unlockedRegionDetail",
                    "args": [
                        {
                            "name": "regionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockedRegions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { RegionsService as ApiRegionsService } from '../api/services';\nimport { iif, map, of, switchMap } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { toObservable, toSignal } from '@angular/core/rxjs-interop';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegionsService {\n  apiRegionsSvc = inject(ApiRegionsService);\n  authSvc = inject(AuthService);\n\n  unlockedRegions() {\n    return this.apiRegionsSvc.unlockedRegionsUnlockedGet().pipe(\n      map((regions) => regions.map((region) => region.regionId)),\n      map((regionIds) => new Set(regionIds)),\n    );\n  }\n\n  currentUnlockedRegions = toSignal(\n    toObservable(this.authSvc.currentToken).pipe(\n      switchMap((token) => iif(() => !!token, this.unlockedRegions(), of(new Set<string>()))),\n    ),\n  );\n\n  unlockedRegionDetail(regionId: string) {\n    return this.apiRegionsSvc\n      .unlockedDetailRegionsUnlockedRegionIdGet({ region_id: regionId })\n      .pipe(\n        map((region) => {\n          return {\n            id: region.regionId,\n            lastVisited: region.lastVisited,\n            firstVisited: region.firstVisited,\n            visitedCount: region.visitedCount,\n            lastActivityId: region.lastActivityId,\n          };\n        }),\n      );\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegionsService",
            "id": "injectable-RegionsService-10eb157819f532996be7e0bdb63f657e9bd27ccd4ffa127a0263efd0271819989adfa324eccc2cbeb6997295487492deaf3819b77180712117ec6f440308c739-1",
            "file": "src/app/api/services/regions.service.ts",
            "properties": [
                {
                    "name": "UnlockedDetailRegionsUnlockedRegionIdGetPath",
                    "defaultValue": "'/regions/unlocked/{region_id}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>unlockedDetailRegionsUnlockedRegionIdGet()</code></p>\n",
                    "line": 59,
                    "rawdescription": "\nPath part for operation `unlockedDetailRegionsUnlockedRegionIdGet()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "UnlockedRegionsUnlockedGetPath",
                    "defaultValue": "'/regions/unlocked'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Path part for operation <code>unlockedRegionsUnlockedGet()</code></p>\n",
                    "line": 26,
                    "rawdescription": "\nPath part for operation `unlockedRegionsUnlockedGet()`",
                    "modifierKind": [
                        126,
                        148
                    ]
                },
                {
                    "name": "_rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "unlockedDetailRegionsUnlockedRegionIdGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UnlockedRegionDetail>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocked Detail.\n\nGet the details of a specific region that the user has unlocked\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `unlockedDetailRegionsUnlockedRegionIdGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Unlocked Detail.</p>\n<p>Get the details of a specific region that the user has unlocked</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>unlockedDetailRegionsUnlockedRegionIdGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockedDetailRegionsUnlockedRegionIdGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<UnlockedRegionDetail>>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocked Detail.\n\nGet the details of a specific region that the user has unlocked\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `unlockedDetailRegionsUnlockedRegionIdGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Unlocked Detail.</p>\n<p>Get the details of a specific region that the user has unlocked</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>unlockedDetailRegionsUnlockedRegionIdGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockedRegionsUnlockedGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<UnlockedRegion>>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocked.\n\nGet all the regions that the user has unlocked\n\nThis method provides access only to the response body.\nTo access the full response (for headers, for example), `unlockedRegionsUnlockedGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Unlocked.</p>\n<p>Get all the regions that the user has unlocked</p>\n<p>This method provides access only to the response body.\nTo access the full response (for headers, for example), <code>unlockedRegionsUnlockedGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockedRegionsUnlockedGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<UnlockedRegion>>>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocked.\n\nGet all the regions that the user has unlocked\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `unlockedRegionsUnlockedGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>Unlocked.</p>\n<p>Get all the regions that the user has unlocked</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>unlockedRegionsUnlockedGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { unlockedDetailRegionsUnlockedRegionIdGet } from '../fn/regions/unlocked-detail-regions-unlocked-region-id-get';\nimport { UnlockedDetailRegionsUnlockedRegionIdGet$Params } from '../fn/regions/unlocked-detail-regions-unlocked-region-id-get';\nimport { UnlockedRegion } from '../models/unlocked-region';\nimport { UnlockedRegionDetail } from '../models/unlocked-region-detail';\nimport { unlockedRegionsUnlockedGet } from '../fn/regions/unlocked-regions-unlocked-get';\nimport { UnlockedRegionsUnlockedGet$Params } from '../fn/regions/unlocked-regions-unlocked-get';\n\n@Injectable({ providedIn: 'root' })\nexport class RegionsService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `unlockedRegionsUnlockedGet()` */\n  static readonly UnlockedRegionsUnlockedGetPath = '/regions/unlocked';\n\n  /**\n   * Unlocked.\n   *\n   * Get all the regions that the user has unlocked\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `unlockedRegionsUnlockedGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  unlockedRegionsUnlockedGet$Response(params?: UnlockedRegionsUnlockedGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UnlockedRegion>>> {\n    return unlockedRegionsUnlockedGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Unlocked.\n   *\n   * Get all the regions that the user has unlocked\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `unlockedRegionsUnlockedGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  unlockedRegionsUnlockedGet(params?: UnlockedRegionsUnlockedGet$Params, context?: HttpContext): Observable<Array<UnlockedRegion>> {\n    return this.unlockedRegionsUnlockedGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<UnlockedRegion>>): Array<UnlockedRegion> => r.body)\n    );\n  }\n\n  /** Path part for operation `unlockedDetailRegionsUnlockedRegionIdGet()` */\n  static readonly UnlockedDetailRegionsUnlockedRegionIdGetPath = '/regions/unlocked/{region_id}';\n\n  /**\n   * Unlocked Detail.\n   *\n   * Get the details of a specific region that the user has unlocked\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `unlockedDetailRegionsUnlockedRegionIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  unlockedDetailRegionsUnlockedRegionIdGet$Response(params: UnlockedDetailRegionsUnlockedRegionIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UnlockedRegionDetail>> {\n    return unlockedDetailRegionsUnlockedRegionIdGet(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * Unlocked Detail.\n   *\n   * Get the details of a specific region that the user has unlocked\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `unlockedDetailRegionsUnlockedRegionIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  unlockedDetailRegionsUnlockedRegionIdGet(params: UnlockedDetailRegionsUnlockedRegionIdGet$Params, context?: HttpContext): Observable<UnlockedRegionDetail> {\n    return this.unlockedDetailRegionsUnlockedRegionIdGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<UnlockedRegionDetail>): UnlockedRegionDetail => r.body)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseService"
            ],
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RegionsService-1"
        },
        {
            "name": "UserStateService",
            "id": "injectable-UserStateService-43070f0a7706799f8931764d39a509a5b738bc16bff61a41e4243150697c2ca604ecbcca44b7624a26733a6f3f173c6d614291a67ba838f6f737aaa973bee458",
            "file": "src/app/services/user-state.service.ts",
            "properties": [
                {
                    "name": "isFirstLogin",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "markFirstLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unmarkFirstLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserStateService {\n  isFirstLogin = signal(false);\n\n  markFirstLogin() {\n    this.isFirstLogin.set(true);\n  }\n\n  unmarkFirstLogin() {\n    this.isFirstLogin.set(false);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "RemoveQueryParamsGuard",
            "id": "injectable-RemoveQueryParamsGuard-92a195246e7e42e73392cb28d1910eecc7a81d9d71f098f0e348e2155864926239a389e9234e73f9dc579fa97b1a7c72af99dd26cb3345ec6c8a313caf394521",
            "file": "src/app/guards/remove-query-params.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RemoveQueryParamsGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (Object.keys(route.queryParams).length > 0) {\n      this.router.navigate([state.url.split('?')[0]]);\n      return false;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "HeaderParameter",
            "id": "class-HeaderParameter-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 188,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the HTTP request header</p>\n",
            "rawdescription": "\n\nA parameter in the HTTP request header\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Parameter"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Parameter",
            "id": "class-Parameter-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "description": "<p>Base class for a parameter</p>\n",
            "rawdescription": "\n\nBase class for a parameter\n",
            "methods": [
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParameterCodec",
            "id": "class-ParameterCodec-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See <a href=\"https://github.com/angular/angular/issues/18261\">https://github.com/angular/angular/issues/18261</a></p>\n",
            "rawdescription": "\n\nCustom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n",
            "methods": [
                {
                    "name": "decodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpParameterCodec"
            ]
        },
        {
            "name": "PathParameter",
            "id": "class-PathParameter-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the operation path</p>\n",
            "rawdescription": "\n\nA parameter in the operation path\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Parameter"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryParameter",
            "id": "class-QueryParameter-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 129,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the query</p>\n",
            "rawdescription": "\n\nA parameter in the query\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "Parameter"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RequestBuilder",
            "id": "class-RequestBuilder-03c6655a88136897de437edf3a30da69554cc1d87c735d783699c39724e5ead46ac969ae09e5c009e68a092860488944526901452f1d24d113e0f0cd5e6dbda5",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 216,
                "jsdoctags": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_bodyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 215
                },
                {
                    "name": "_bodyContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "_header",
                    "defaultValue": "new Map<string, HeaderParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 214,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_path",
                    "defaultValue": "new Map<string, PathParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_query",
                    "defaultValue": "new Map<string, QueryParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 213,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 221,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "operationPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 220,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 219,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "description": "<p>Helper to build http requests from parameters</p>\n",
            "rawdescription": "\n\nHelper to build http requests from parameters\n",
            "methods": [
                {
                    "name": "body",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the body content, along with the content type\n",
                    "description": "<p>Sets the body content, along with the content type</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuilds the request with the current set parameters\n",
                    "description": "<p>Builds the request with the current set parameters</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formDataValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "header",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a header parameter\n",
                    "description": "<p>Sets a header parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "path",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a path parameter\n",
                    "description": "<p>Sets a path parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a query parameter\n",
                    "description": "<p>Sets a query parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BtnDirective",
            "id": "directive-BtnDirective-408e72bc004104c11dcf895a5f75209055d6950d584f00923383e8781a5350edcf561fb949930cb0f99eebdbd0254c18b1c9242a3c229fa71fc8a74262a32a62",
            "file": "src/app/common-components/btn.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector:\n    'button[appBtn][main], a[appBtn][main], button[appBtn]:not([main]), a[appBtn]:not([main])',\n  standalone: true,\n})\nexport class BtnDirective implements OnInit {\n  private readonly baseClasses = [\n    'h-12',\n    'inline-flex',\n    'items-center',\n    'rounded-lg',\n    'px-5',\n    'py-2.5',\n    'gap-2',\n    'text-sm',\n    'font-medium',\n    'justify-center',\n  ];\n\n  private readonly mainClasses = [\n    'bg-primary-700',\n    'text-white',\n    'hover:bg-primary-800',\n    'focus:ring-primary-300',\n    'dark:bg-primary-600',\n    'dark:hover:bg-primary-700',\n  ];\n\n  private readonly defaultClasses = [\n    'border',\n    'border-gray-200',\n    'bg-white',\n    'text-gray-900',\n    'hover:bg-gray-100',\n    'hover:text-primary-700',\n    'dark:border-gray-600',\n    'dark:bg-gray-800',\n    'dark:text-gray-400',\n    'dark:hover:bg-gray-700',\n    'dark:hover:text-white',\n  ];\n\n  private readonly disabledClasses = ['opacity-50', 'cursor-not-allowed'];\n\n  constructor(private el: ElementRef<HTMLButtonElement | HTMLAnchorElement>) {}\n\n  get main(): boolean {\n    return this.el.nativeElement.hasAttribute('main');\n  }\n\n  get disabled(): boolean {\n    return this.el.nativeElement.hasAttribute('disabled');\n  }\n\n  ngOnInit() {\n    const element = this.el.nativeElement;\n\n    element.setAttribute('type', 'button');\n\n    this.baseClasses.forEach((cls) => element.classList.add(cls));\n\n    const variantClasses = this.main ? this.mainClasses : this.defaultClasses;\n    variantClasses.forEach((cls) => element.classList.add(cls));\n\n    if (this.disabled) {\n      this.disabledClasses.forEach((cls) => element.classList.add(cls));\n    }\n  }\n}\n",
            "selector": "button[appBtn][main], a[appBtn][main], button[appBtn]:not([main]), a[appBtn]:not([main])",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "baseClasses",
                    "defaultValue": "[\n    'h-12',\n    'inline-flex',\n    'items-center',\n    'rounded-lg',\n    'px-5',\n    'py-2.5',\n    'gap-2',\n    'text-sm',\n    'font-medium',\n    'justify-center',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "defaultClasses",
                    "defaultValue": "[\n    'border',\n    'border-gray-200',\n    'bg-white',\n    'text-gray-900',\n    'hover:bg-gray-100',\n    'hover:text-primary-700',\n    'dark:border-gray-600',\n    'dark:bg-gray-800',\n    'dark:text-gray-400',\n    'dark:hover:bg-gray-700',\n    'dark:hover:text-white',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "disabledClasses",
                    "defaultValue": "['opacity-50', 'cursor-not-allowed']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "mainClasses",
                    "defaultValue": "[\n    'bg-primary-700',\n    'text-white',\n    'hover:bg-primary-800',\n    'focus:ring-primary-300',\n    'dark:bg-primary-600',\n    'dark:hover:bg-primary-700',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLButtonElement | HTMLAnchorElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLButtonElement | HTMLAnchorElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "main": {
                    "name": "main",
                    "getSignature": {
                        "name": "main",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 53
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-d88e30984f040a3bf81a8c09e453588fc6ca3d165fb3b3072e2cd7c7a00116da7e367eabb709627c0b558c9d4c842e690f29addf3151e1be03db34575ae6166f",
            "file": "src/app/common-components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core';\n\ntype AlertType = 'success' | 'info' | 'warning' | 'danger' | 'standard';\n@Component({\n  selector: 'app-alert',\n  imports: [],\n  templateUrl: './alert.component.html',\n  styleUrl: './alert.component.css',\n})\nexport class AlertComponent {\n  type = input.required<AlertType>();\n}\n",
            "styleUrl": "./alert.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"mb-4 rounded-lg p-4 text-sm\" role=\"alert\" [classList]=\"[type()]\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5881b7bb3899f1205c81db7457df9230311a4d3cbd9404a6181815d5c2f1007b17df12a1f81fae2c0751fc607473146b83d716e211f29573669ce3faff7d0577",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Rowerowe Gminy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MainLayoutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\nimport { FormsModule } from '@angular/forms';\nimport { MainLayoutComponent } from './components/main-layout/main-layout.component';\n\nimport { initFlowbite } from 'flowbite';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, FormsModule, MainLayoutComponent],\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  title = 'Rowerowe Gminy';\n\n  ngOnInit(): void {\n    initFlowbite();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-main-layout>\n  <router-outlet></router-outlet>\n</app-main-layout>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "FirstLoginModalComponent",
            "id": "component-FirstLoginModalComponent-81b3e94a0c16a1c846eb0a899030b569159452eeaa07e565fac9c94f09cc2ed85aff10e4b4d697ca9470aaebefa2cb7932b57eba8601ff5e308e4c833e669610",
            "file": "src/app/components/first-login-modal/first-login-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-first-login-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./first-login-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activitySvc",
                    "defaultValue": "inject(ActivityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                },
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Modal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userStateSvc",
                    "defaultValue": "inject(UserStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ImportDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, model, OnInit } from '@angular/core';\nimport { Modal, ModalOptions } from 'flowbite';\n\nimport { UserStateService } from '../../services/user-state.service';\nimport { ActivityService } from '../../services/activity.service';\nimport { ImportDialogComponent } from '../import-dialog/import-dialog.component';\n\n@Component({\n  selector: 'app-first-login-modal',\n  imports: [ImportDialogComponent],\n  templateUrl: './first-login-modal.component.html',\n})\nexport class FirstLoginModalComponent implements OnInit {\n  userStateSvc = inject(UserStateService);\n  activitySvc = inject(ActivityService);\n\n  modal!: Modal;\n\n  isOpen = model<boolean>(false);\n\n  ngOnInit(): void {\n    const $targetEl = document.getElementById('first-login-modal');\n    const options: ModalOptions = {\n      placement: 'center',\n      backdrop: 'dynamic',\n      backdropClasses: 'bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40',\n      closable: false,\n      onHide: () => {\n        console.log('modal is hidden');\n      },\n      onShow: () => {\n        console.log('modal is shown');\n      },\n      onToggle: () => {\n        console.log('modal has been toggled');\n      },\n    };\n    this.modal = new Modal($targetEl, options);\n    if (this.isOpen()) {\n      this.modal.show();\n    } else {\n      this.modal.hide();\n    }\n  }\n\n  onClose() {\n    this.userStateSvc.unmarkFirstLogin();\n    this.modal.hide();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  id=\"first-login-modal\"\n  tabindex=\"-1\"\n  aria-hidden=\"true\"\n  class=\"fixed top-0 right-0 left-0 z-50 hidden h-[calc(100%-1rem)] max-h-full w-full overflow-x-hidden overflow-y-auto p-4 md:inset-0\"\n>\n  <div class=\"relative max-h-full w-full max-w-2xl\">\n    <!-- Modal content -->\n    <div class=\"relative rounded-lg bg-white shadow-xs dark:bg-gray-700\">\n      <!-- Modal header -->\n      <div class=\"flex items-start justify-between rounded-t border-b p-5 dark:border-gray-600\">\n        <h3 class=\"text-xl font-semibold text-gray-900 lg:text-2xl dark:text-white\">\n          Import aktywności\n        </h3>\n      </div>\n      <!-- Modal body -->\n      <div class=\"space-y-6 p-6\">\n        <p class=\"text-base leading-relaxed text-gray-500 dark:text-gray-400\">\n          Witaj w aplikacji Rowerowe Gminy! Jest to twoje pierwsze logowanie, dlatego prosimy o\n          zaimportowanie Twoich dotychczasowych aktywności ze Stravy, abyśmy mogli zwizualizować\n          odwiedzone przez Ciebie gminy. Po zakończeniu importu zobaczysz mapę z oznaczonymi\n          miejscami, w których już byłeś, oraz dowiesz się, które gminy czekają jeszcze na odkrycie!\n          Wszystkie nowe aktywności będą automatycznie importowane na bieżąco.\n        </p>\n        <hr class=\"py-2\" />\n        <app-import-dialog [includeCloseOption]=\"true\" (close)=\"onClose()\" />\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ImportDialogComponent",
            "id": "component-ImportDialogComponent-f5ccf8a2849dc11e945f21386de4cf787febdf3fbc92cc7e54a610b6e09cffe35789620301537872ee8eedaaabf8241f87cea9bc6ea174aa461a091191d7dc70",
            "file": "src/app/components/import-dialog/import-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ tablerRotateClockwise, tablerCloudDown, tablerClock, tablerCheck })"
                }
            ],
            "selector": "app-import-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./import-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "includeCloseOption",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "activitySvc",
                    "defaultValue": "inject(ActivityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "athleteInfo",
                    "defaultValue": "injectQuery(() => ({\n    queryFn: () => lastValueFrom(this.athleteSvc.getCurrentAthlete()),\n    queryKey: ['currentAthlete'],\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "athleteSvc",
                    "defaultValue": "inject(AthleteService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "eligibleForImport",
                    "defaultValue": "computed(() => {\n    if (this.athleteInfo.isLoading()) {\n      return 'loading';\n    }\n    if (this.athleteInfo.isError()) {\n      return 'error';\n    }\n    if (this.athleteInfo.data()?.backlogSyncEligible) {\n      return 'eligible';\n    }\n    return 'ineligible';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "includeCloseOption",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                },
                {
                    "name": "lastImport",
                    "defaultValue": "computed(() => this.athleteInfo.data()?.stravaAccountCreatedAt?.toLocal())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "lastImportEffect",
                    "defaultValue": "effect(() => {\n    const li = this.lastImport();\n    if (li) {\n      this.startDate.setValue(li.toISODate());\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "startDate",
                    "defaultValue": "new FormControl(DateTime.now().toISODate(), [this.dateValidator])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "startDateErrors",
                    "defaultValue": "toSignal(\n    combineLatest([this.startDate.statusChanges, this.startDate.valueChanges]).pipe(\n      map(() => (this.startDate.errors ? Object.values(this.startDate.errors) : [])),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "triggerBacklogMutation",
                    "defaultValue": "injectMutation(() => ({\n    mutationFn: () => {\n      const date = DateTime.fromISO(this.startDate.value!);\n      if (!date.isValid) {\n        throw new Error('Invalid date');\n      }\n      return lastValueFrom(this.activitySvc.triggerBacklog(date));\n    },\n    onSuccess: () => {\n      this.userStateSvc.unmarkFirstLogin();\n    },\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "userStateSvc",
                    "defaultValue": "inject(UserStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "dateValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BtnDirective",
                    "type": "directive"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "NgIconComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, effect, inject, input, output } from '@angular/core';\nimport { ActivityService } from '../../services/activity.service';\nimport { UserStateService } from '../../services/user-state.service';\nimport { DateTime } from 'luxon';\nimport {\n  AbstractControl,\n  FormControl,\n  ReactiveFormsModule,\n  ValidationErrors,\n} from '@angular/forms';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { combineLatest, lastValueFrom, map } from 'rxjs';\nimport { injectMutation } from '@tanstack/angular-query-experimental';\nimport { BtnDirective } from '../../common-components/btn.directive';\nimport { NgIconComponent, provideIcons } from '@ng-icons/core';\nimport {\n  tablerCheck,\n  tablerClock,\n  tablerCloudDown,\n  tablerRotateClockwise,\n} from '@ng-icons/tabler-icons';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { AthleteService } from '../../services/athlete.service';\nimport { ProgressComponent } from '../../common-components/progress/progress.component';\n\n@Component({\n  selector: 'app-import-dialog',\n  imports: [BtnDirective, ReactiveFormsModule, NgIconComponent, ProgressComponent],\n  providers: [provideIcons({ tablerRotateClockwise, tablerCloudDown, tablerClock, tablerCheck })],\n  templateUrl: './import-dialog.component.html',\n  styleUrl: './import-dialog.component.css',\n})\nexport class ImportDialogComponent {\n  includeCloseOption = input(false);\n  close = output();\n\n  userStateSvc = inject(UserStateService);\n  activitySvc = inject(ActivityService);\n  athleteSvc = inject(AthleteService);\n\n  athleteInfo = injectQuery(() => ({\n    queryFn: () => lastValueFrom(this.athleteSvc.getCurrentAthlete()),\n    queryKey: ['currentAthlete'],\n  }));\n\n  eligibleForImport = computed(() => {\n    if (this.athleteInfo.isLoading()) {\n      return 'loading';\n    }\n    if (this.athleteInfo.isError()) {\n      return 'error';\n    }\n    if (this.athleteInfo.data()?.backlogSyncEligible) {\n      return 'eligible';\n    }\n    return 'ineligible';\n  });\n\n  lastImport = computed(() => this.athleteInfo.data()?.stravaAccountCreatedAt?.toLocal());\n\n  lastImportEffect = effect(() => {\n    const li = this.lastImport();\n    if (li) {\n      this.startDate.setValue(li.toISODate());\n    }\n  });\n\n  startDate = new FormControl(DateTime.now().toISODate(), [this.dateValidator]);\n  startDateErrors = toSignal(\n    combineLatest([this.startDate.statusChanges, this.startDate.valueChanges]).pipe(\n      map(() => (this.startDate.errors ? Object.values(this.startDate.errors) : [])),\n    ),\n  );\n\n  triggerBacklogMutation = injectMutation(() => ({\n    mutationFn: () => {\n      const date = DateTime.fromISO(this.startDate.value!);\n      if (!date.isValid) {\n        throw new Error('Invalid date');\n      }\n      return lastValueFrom(this.activitySvc.triggerBacklog(date));\n    },\n    onSuccess: () => {\n      this.userStateSvc.unmarkFirstLogin();\n    },\n  }));\n\n  onSubmit() {\n    if (!this.startDate.valid) {\n      return;\n    }\n    console.log(this.startDate.value);\n    this.triggerBacklogMutation.mutate();\n  }\n\n  onClose() {\n    this.close.emit();\n  }\n\n  dateValidator(control: AbstractControl): ValidationErrors | null {\n    if (control.value === null || control.value === undefined || control.value === '') {\n      return { info: 'Wymagane pole' };\n    }\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!dateRegex.test(control.value)) {\n      return { info: 'Nieprawidłowy format daty (YYYY-MM-DD)' };\n    }\n    try {\n      const date = DateTime.fromISO(control.value);\n      if (!date.isValid) {\n        return { info: 'Nieprawidłowa data' };\n      }\n      if (date > DateTime.now()) {\n        return { info: 'Data nie może być w przyszłości' };\n      }\n    } catch {\n      return { info: 'Nieprawidłowa data' };\n    }\n    return null;\n  }\n}\n",
            "styleUrl": "./import-dialog.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (eligibleForImport() === \"loading\") {\n  <div class=\"grid h-full grid-cols-1 place-content-center place-items-center gap-4 py-4\">\n    <app-progress class=\"w-9/12\" />\n    <p>Ładowanie...</p>\n  </div>\n  @if (includeCloseOption()) {\n    <div class=\"flex justify-end py-4\">\n      <button appBtn main (click)=\"onClose()\">Zamknij</button>\n    </div>\n  }\n}\n@if (eligibleForImport() === \"error\") {\n  <div\n    class=\"mb-4 rounded-lg border border-red-300 bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n    role=\"alert\"\n  >\n    <span class=\"font-medium\">Błąd pobierania danych.</span> Spróbuj ponownie później.\n  </div>\n\n  <div class=\"flex justify-end gap-2 py-4\">\n    <button appBtn (click)=\"athleteInfo.refetch()\">Ponów próbę</button>\n    @if (includeCloseOption()) {\n      <button appBtn main (click)=\"onClose()\">Zamknij</button>\n    }\n  </div>\n}\n\n@if (eligibleForImport() === \"ineligible\") {\n  <div\n    class=\"mb-4 rounded-lg border border-red-300 bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n    role=\"alert\"\n  >\n    <span class=\"font-medium\">Opcja zablokowana.</span> Import możesz wykonać tylko raz na 14 dni.\n    Ostatnie uruchomienie: {{ lastImport()?.toLocal()?.toISODate() }}\n  </div>\n  @if (includeCloseOption()) {\n    <div class=\"flex justify-end py-4\">\n      <button appBtn main (click)=\"onClose()\">Zamknij</button>\n    </div>\n  }\n}\n@if (eligibleForImport() === \"eligible\") {\n  <div class=\"space-y-6\">\n    <form class=\"space-y-4\" action=\"#\">\n      <div>\n        <label for=\"start-date\" class=\"mb-2 block text-sm font-medium text-gray-900 dark:text-white\"\n          >Importuj dane od:</label\n        >\n        <input\n          type=\"text\"\n          name=\"start-date\"\n          id=\"start-date\"\n          [formControl]=\"startDate\"\n          class=\"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-gray-800 focus:ring-gray-800 dark:border-gray-500 dark:bg-gray-600 dark:text-white dark:placeholder-gray-400\"\n          placeholder=\"Data utworzenia konta\"\n        />\n        @for (error of startDateErrors(); track $index) {\n          <p class=\"mt-2 text-sm text-red-600 dark:text-red-500\">{{ error }}</p>\n        }\n      </div>\n    </form>\n  </div>\n  <div class=\"rounded-b border-t border-gray-200 py-6 rtl:space-x-reverse dark:border-gray-600\">\n    @if (triggerBacklogMutation.isIdle()) {\n      <div\n        class=\"mb-4 rounded-lg border border-blue-300 bg-blue-50 p-4 text-sm text-blue-800 dark:bg-gray-800 dark:text-blue-400\"\n        role=\"alert\"\n      >\n        Import możesz wykonać tylko raz na 14 dni.\n      </div>\n    }\n    @if (triggerBacklogMutation.isError()) {\n      <div\n        class=\"mb-4 rounded-lg border border-red-300 bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n        role=\"alert\"\n      >\n        <span class=\"font-medium\">Błąd!</span> Uruchomienie importu się nie powiodło.\n      </div>\n    }\n    @if (triggerBacklogMutation.isSuccess()) {\n      <div\n        class=\"mb-4 rounded-lg border border-green-300 bg-green-50 p-4 text-sm text-green-800 dark:bg-gray-800 dark:text-green-400\"\n        role=\"alert\"\n      >\n        <span class=\"font-medium\">Sukces!</span> Import danych został pomyślnie uruchomiony. Wkrótce\n        zobaczysz swoje aktywności na mapie.\n      </div>\n    }\n    <div class=\"flex items-center justify-end space-x-2\">\n      @if (triggerBacklogMutation.isPending()) {\n        <button appBtn disabled main class=\"flex items-center space-x-1\">\n          <div class=\"h-6\"><ng-icon name=\"tablerRotateClockwise\" class=\"animate-spin\" /></div>\n          <span>Importuj</span>\n        </button>\n      }\n      @if (triggerBacklogMutation.isSuccess()) {\n        @if (includeCloseOption()) {\n          <button appBtn main (click)=\"onClose()\">\n            <div class=\"h-6\"><ng-icon name=\"tablerCheck\" /></div>\n            Zamknij\n          </button>\n        } @else {\n          <button appBtn main disabled>\n            <div class=\"h-6\"><ng-icon name=\"tablerCloudDown\" /></div>\n            Importuj\n          </button>\n        }\n      }\n      @if (triggerBacklogMutation.isIdle() || triggerBacklogMutation.isError()) {\n        <button appBtn main (click)=\"onSubmit()\">\n          <div class=\"h-6\"><ng-icon name=\"tablerCloudDown\" /></div>\n          Importuj\n        </button>\n      }\n      @if (!triggerBacklogMutation.isSuccess() && includeCloseOption()) {\n        <button appBtn (click)=\"onClose()\">\n          <div class=\"h-6\"><ng-icon name=\"tablerClock\" /></div>\n          Może później\n        </button>\n      }\n    </div>\n  </div>\n}\n"
        },
        {
            "name": "LoginPurgatoryComponent",
            "id": "component-LoginPurgatoryComponent-2102feb1ba3287effbe7406818b32ba4f846c23cf801e24c7ded06da0948252ea152749d4b12ef09d782d57394e6810411a4edb62eb683531eea41cb046a75a4",
            "file": "src/app/pages/login-purgatory/login-purgatory.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-purgatory",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-purgatory.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "athleteSvc",
                    "defaultValue": "inject(AthleteService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorInfo",
                    "defaultValue": "computed(() => {\n    if (this.loginMutation.isSuccess()) {\n      const successData = this.loginMutation.data();\n      if (!successData.success) {\n        return successData.errorCode;\n      }\n    }\n    return undefined;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "extAuthSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'LoginPurgatory' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loginMutation",
                    "defaultValue": "injectMutation(() => ({\n    mutationFn: (params: { code: string; scope: string }) =>\n      lastValueFrom(this.extAuthSvc.feedTokenResposive(params.code, params.scope)),\n    onError: (error) => {\n      this.loggerSvc.error(`Failed to login: ${error}`);\n    },\n    onSuccess: (authResp) => {\n      if (!authResp.success) {\n        this.loggerSvc.error(`Failed to login: ${authResp.errorCode}`);\n        return;\n      }\n      const isFirstLogin = authResp.isFirstLogin;\n      this.loggerSvc.info('Not first login, redirecting to home');\n      if (isFirstLogin) {\n        this.userStateSvc.markFirstLogin();\n      } else {\n        this.userStateSvc.unmarkFirstLogin();\n      }\n\n      this.router.navigate(['home']);\n    },\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pageState",
                    "defaultValue": "computed(() => {\n    if (!this.sufficentParams()) {\n      return 'error';\n    } else if (this.loginMutation.isError()) {\n      return 'error';\n    } else if (this.loginMutation.isSuccess()) {\n      if (this.loginMutation.data().success) {\n        return 'redirecting';\n      } else {\n        return 'error';\n      }\n    } else if (this.loginMutation.isPending()) {\n      return 'loading';\n    } else {\n      // Something broke, possibly mutation didn't trigger\n      return 'error';\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "queryParams",
                    "defaultValue": "toSignal(this.route.queryParamMap)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sufficentParams",
                    "defaultValue": "computed(() => {\n    return this.queryParams()?.get('code') !== null && this.queryParams()?.get('scope') !== null;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "userStateSvc",
                    "defaultValue": "inject(UserStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ProgressComponent",
                    "type": "component"
                },
                {
                    "name": "StravaBtnComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit, computed } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { ProgressComponent } from '../../common-components/progress/progress.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { StravaBtnComponent } from '../../common-components/strava-btn/strava-btn.component';\nimport { injectMutation } from '@tanstack/angular-query-experimental';\nimport { lastValueFrom } from 'rxjs';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { AthleteService } from '../../services/athlete.service';\nimport { UserStateService } from '../../services/user-state.service';\n\n@Component({\n  selector: 'app-login-purgatory',\n  imports: [ProgressComponent, StravaBtnComponent],\n  templateUrl: './login-purgatory.component.html',\n})\nexport class LoginPurgatoryComponent implements OnInit {\n  extAuthSvc = inject(AuthService);\n  athleteSvc = inject(AthleteService);\n  route = inject(ActivatedRoute);\n  router = inject(Router);\n  userStateSvc = inject(UserStateService);\n  loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'LoginPurgatory' },\n  });\n\n  loginMutation = injectMutation(() => ({\n    mutationFn: (params: { code: string; scope: string }) =>\n      lastValueFrom(this.extAuthSvc.feedTokenResposive(params.code, params.scope)),\n    onError: (error) => {\n      this.loggerSvc.error(`Failed to login: ${error}`);\n    },\n    onSuccess: (authResp) => {\n      if (!authResp.success) {\n        this.loggerSvc.error(`Failed to login: ${authResp.errorCode}`);\n        return;\n      }\n      const isFirstLogin = authResp.isFirstLogin;\n      this.loggerSvc.info('Not first login, redirecting to home');\n      if (isFirstLogin) {\n        this.userStateSvc.markFirstLogin();\n      } else {\n        this.userStateSvc.unmarkFirstLogin();\n      }\n\n      this.router.navigate(['home']);\n    },\n  }));\n\n  queryParams = toSignal(this.route.queryParamMap);\n\n  sufficentParams = computed(() => {\n    return this.queryParams()?.get('code') !== null && this.queryParams()?.get('scope') !== null;\n  });\n\n  pageState = computed(() => {\n    if (!this.sufficentParams()) {\n      return 'error';\n    } else if (this.loginMutation.isError()) {\n      return 'error';\n    } else if (this.loginMutation.isSuccess()) {\n      if (this.loginMutation.data().success) {\n        return 'redirecting';\n      } else {\n        return 'error';\n      }\n    } else if (this.loginMutation.isPending()) {\n      return 'loading';\n    } else {\n      // Something broke, possibly mutation didn't trigger\n      return 'error';\n    }\n  });\n\n  errorInfo = computed(() => {\n    if (this.loginMutation.isSuccess()) {\n      const successData = this.loginMutation.data();\n      if (!successData.success) {\n        return successData.errorCode;\n      }\n    }\n    return undefined;\n  });\n\n  ngOnInit() {\n    if (this.sufficentParams()) {\n      this.loggerSvc.info('Sufficent params, triggering login mutation');\n      const code = this.route.snapshot.queryParamMap.get('code')!;\n      const scope = this.route.snapshot.queryParamMap.get('scope')!;\n      this.loginMutation.mutate({ code, scope });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid h-full grid-cols-1 place-content-center place-items-center gap-4\">\n  @switch (pageState()) {\n    @case (\"loading\") {\n      <app-progress class=\"w-9/12\" />\n      <p>Logowanie...</p>\n    }\n    @case (\"redirecting\") {\n      <app-progress class=\"w-9/12\" />\n      <p>Ładowanie...</p>\n    }\n    @case (\"error\") {\n      <p>Wystąpił błąd podczas logowania. Spróbuj ponownie.</p>\n      @switch (errorInfo()) {\n        @case (\"invalid_scope\") {\n          <div\n            class=\"mb-4 rounded-lg bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n            role=\"alert\"\n          >\n            <span class=\"font-medium\">Błąd uprawnień</span> Aplikacja potrzebuje dostępu do Twoich\n            aktywności na Stravie. Podczas logowania zaznacz odpowiednie uprawnienia.\n          </div>\n        }\n        @case (\"invalid_code\") {\n          <div\n            class=\"mb-4 rounded-lg bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n            role=\"alert\"\n          >\n            Nieudana próba logowania.\n          </div>\n        }\n        @case (\"strava_error\") {\n          <div\n            class=\"mb-4 rounded-lg bg-red-50 p-4 text-sm text-red-800 dark:bg-gray-800 dark:text-red-400\"\n            role=\"alert\"\n          >\n            <span class=\"font-medium\">Błąd usługi Strava</span>\n          </div>\n        }\n        @default {\n          <p>{{ errorInfo() }}</p>\n        }\n      }\n      @if (errorInfo()) {}\n      <app-strava-btn />\n    }\n  }\n</div>\n"
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-2ec1f7063d2ee4f5083c6caaa977f9adc6ca1cf1736d5cb1070bcd780999bc6a7ace8f6bfdb812b2e7fb1a5a816c30680fb01f3cc3149db830c2ed1d6b69b194",
            "file": "src/app/components/main-layout/main-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ tablerLogout, tablerLogin, tablerMenu2, tablerUser })"
                }
            ],
            "selector": "app-main-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "drawerOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fixFcSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "routerSvc",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "stravaAuthSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIconComponent",
                    "type": "component"
                },
                {
                    "name": "StravaBtnComponent",
                    "type": "component"
                },
                {
                    "name": "BtnDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\n\nimport { ActivatedRoute, Router, RouterLink } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\nimport { NgIconComponent, provideIcons } from '@ng-icons/core';\nimport { tablerLogin, tablerLogout, tablerMenu2, tablerUser } from '@ng-icons/tabler-icons';\nimport { StravaBtnComponent } from '../../common-components/strava-btn/strava-btn.component';\nimport { BtnDirective } from '../../common-components/btn.directive';\n@Component({\n  selector: 'app-main-layout',\n  imports: [NgIconComponent, StravaBtnComponent, BtnDirective, RouterLink],\n  providers: [provideIcons({ tablerLogout, tablerLogin, tablerMenu2, tablerUser })],\n  templateUrl: './main-layout.component.html',\n})\nexport class MainLayoutComponent {\n  drawerOpen = false;\n  // shapeTypeControl = new FormControl('0');\n  routerSvc = inject(Router);\n  activatedRoute = inject(ActivatedRoute);\n  stravaAuthSvc = inject(AuthService);\n\n  fixFcSub: Subscription | undefined;\n\n  toggleDrawer() {\n    this.drawerOpen = !this.drawerOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex h-dvh flex-col\">\n  <nav class=\"border-b-2 border-gray-200\">\n    <div\n      class=\"mx-auto flex max-w-(--breakpoint-2xl) flex-wrap items-center justify-between gap-2 p-2\"\n    >\n      <a [routerLink]=\"'/home'\">\n        <img src=\"assets/logos/logo-h.svg\" class=\"h-8 md:h-10\" alt=\"Rowerowe Gminy Logo\" />\n      </a>\n\n      <div class=\"grow\"></div>\n      <button\n        data-collapse-toggle=\"navbar-solid-bg\"\n        type=\"button\"\n        class=\"flex h-10 w-10 items-center justify-center rounded-lg p-2 text-sm text-gray-500 hover:bg-gray-100 focus:ring-2 focus:ring-gray-200 focus:outline-hidden md:hidden dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600\"\n        aria-controls=\"navbar-solid-bg\"\n        aria-expanded=\"false\"\n      >\n        <span class=\"sr-only\">Open main menu</span>\n        <ng-icon name=\"tablerMenu2\" class=\"h-full\" />\n      </button>\n      <div class=\"hidden w-full md:block md:w-auto\" id=\"navbar-solid-bg\">\n        <div class=\"flex flex-col space-y-1 md:flex-row md:space-y-0 md:space-x-2\">\n          @if (stravaAuthSvc.isLoggedIn()) {\n            <a appBtn [routerLink]=\"['/user']\">\n              <div class=\"h-6\"><ng-icon name=\"tablerUser\" /></div>\n              Użytkownik\n            </a>\n            <button appBtn (click)=\"stravaAuthSvc.logOut()\">\n              <div class=\"h-6\"><ng-icon name=\"tablerLogout\" /></div>\n              Wyloguj\n            </button>\n          } @else {\n            <app-strava-btn [grow]=\"true\" />\n          }\n        </div>\n      </div>\n    </div>\n  </nav>\n  <div class=\"h-full overflow-auto *:h-full\">\n    <ng-content></ng-content>\n  </div>\n  <img\n    class=\"fixed bottom-0 left-0 max-w-32 rounded-tr-xl bg-white shadow-md md:max-w-36\"\n    src=\"/assets/strava/powered-by.svg\"\n    alt=\"Powered by STRAVA\"\n  />\n</div>\n"
        },
        {
            "name": "MapLibreComponent",
            "id": "component-MapLibreComponent-a7d8ffda44bb34b56a801b3ed58c3bae4bf423f3fd24a2824450e03c587d119f4b5f6d5580f9b483fa0f8e42c39a254f03da49e5a96883f441b534113e7b7de7",
            "file": "src/app/components/map-libre/map-libre.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-libre",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map-libre.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "bordersSelectedFilter",
                    "defaultValue": "computed<any>(() => {\n    const regionId = this.regionId();\n    if (regionId === '') {\n      return true;\n    }\n    if (regionId) {\n      const filter2 = ['any', ['==', ['index-of', regionId, ['get', 'ID']], 0]];\n      this.loggerSvc.info('Borders selected filter', filter2);\n      return filter2;\n    } else {\n      return false;\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "bordersService",
                    "defaultValue": "inject(BordersService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bordersServiceSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "bounds",
                    "defaultValue": "signal(\n    new LngLatBounds([9.127, 43.99], [29.16, 59.845]), // + 0.01 degree tolerance\n    // new LngLatBounds([14.127, 48.99], [24.16, 54.845]), // + 0.01 degree tolerance\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "geoFeatureDataSvc",
                    "defaultValue": "inject(GeoFeatureDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'MapLibreComponent' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "mapCp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LibreMap | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "mapDisplaySettings$",
                    "defaultValue": "this.mapDisplaySvc.currentSettings$.pipe(filter((s) => s !== undefined))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "mapDisplaySvc",
                    "defaultValue": "inject(MapDisplayService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "mapDisplaySvcSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "regionId",
                    "defaultValue": "model<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "routeSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLayerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMapLoad",
                    "args": [
                        {
                            "name": "mapP",
                            "type": "LibreMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapP",
                            "type": "LibreMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BaseMapComponent",
                    "type": "component"
                },
                {
                    "name": "GeoJSONSourceComponent",
                    "type": "component"
                },
                {
                    "name": "LayerComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "ControlComponent",
                    "type": "component"
                },
                {
                    "name": "AttributionControlDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, inject, model, OnDestroy, signal } from '@angular/core';\nimport {\n  AttributionControlDirective,\n  MapComponent as BaseMapComponent,\n  ControlComponent,\n  GeoJSONSourceComponent,\n  LayerComponent,\n} from '@maplibre/ngx-maplibre-gl';\nimport { Map as LibreMap, LngLatBounds, MapGeoJSONFeature, MapMouseEvent } from 'maplibre-gl';\nimport { BordersService } from '../../services/borders.service';\nimport { filter, Subscription } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { MapDisplayService } from '../../services/map-display.service';\nimport { GeoFeatureDataService } from '../../services/geo-feature-data.service';\nimport { CustomNGXLoggerService } from 'ngx-logger';\n\n@Component({\n  selector: 'app-map-libre',\n  imports: [\n    BaseMapComponent,\n    GeoJSONSourceComponent,\n    LayerComponent,\n    AsyncPipe,\n    ControlComponent,\n    AttributionControlDirective,\n  ],\n  templateUrl: './map-libre.component.html',\n})\nexport class MapLibreComponent implements OnDestroy {\n  regionId = model<string | undefined>(undefined);\n\n  mapCp: LibreMap | undefined;\n\n  bounds = signal(\n    new LngLatBounds([9.127, 43.99], [29.16, 59.845]), // + 0.01 degree tolerance\n    // new LngLatBounds([14.127, 48.99], [24.16, 54.845]), // + 0.01 degree tolerance\n  );\n\n  loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'MapLibreComponent' },\n  });\n  activeRoute = inject(ActivatedRoute);\n  bordersService = inject(BordersService);\n  mapDisplaySvc = inject(MapDisplayService);\n  geoFeatureDataSvc = inject(GeoFeatureDataService);\n\n  mapDisplaySettings$ = this.mapDisplaySvc.currentSettings$.pipe(filter((s) => s !== undefined));\n\n  // Yeah, i give up on typing this, this expression is bugged\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  bordersSelectedFilter = computed<any>(() => {\n    const regionId = this.regionId();\n    if (regionId === '') {\n      return true;\n    }\n    if (regionId) {\n      const filter2 = ['any', ['==', ['index-of', regionId, ['get', 'ID']], 0]];\n      this.loggerSvc.info('Borders selected filter', filter2);\n      return filter2;\n    } else {\n      return false;\n    }\n  });\n\n  routeSub: Subscription | undefined;\n  bordersServiceSub: Subscription | undefined;\n  mapDisplaySvcSub: Subscription | undefined;\n\n  constructor() {\n    this.mapDisplaySvcSub = this.mapDisplaySvc.currentSettings$.subscribe((style) => {\n      if (this.mapCp && style) {\n        this.mapCp.setStyle(style);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.routeSub) {\n      this.routeSub.unsubscribe();\n    }\n    if (this.bordersServiceSub) {\n      this.bordersServiceSub.unsubscribe();\n    }\n    if (this.mapDisplaySvcSub) {\n      this.mapDisplaySvcSub.unsubscribe();\n    }\n  }\n\n  onLayerClick(\n    event: MapMouseEvent & {\n      features?: MapGeoJSONFeature[];\n    },\n  ) {\n    const feature = event.features![0];\n    console.log('Layer click feature id:', feature.id, feature);\n    const teryt = feature.id as string;\n    this.regionId.set(teryt);\n  }\n\n  onMapLoad(mapP: LibreMap) {\n    this.mapCp = mapP;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 68
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<mgl-map\n  class=\"h-full\"\n  [style]=\"(mapDisplaySettings$ | async)!\"\n  [zoom]=\"[4]\"\n  [center]=\"[19.42366667, 52.11433333]\"\n  (mapLoad)=\"onMapLoad($event)\"\n  [attributionControl]=\"false\"\n  [maxBounds]=\"bounds()\"\n  [minZoom]=\"4\"\n>\n  <mgl-control\n    mglAttribution\n    position=\"top-left\"\n    [compact]=\"true\"\n    [customAttribution]=\"'MapLibre | geoportal.gov.pl'\"\n  ></mgl-control>\n  @if (geoFeatureDataSvc.borderInfoExt(); as bi) {\n    <!-- <ng-container *ngIf=\"fcStatic as features\"> -->\n    <mgl-geojson-source id=\"borders\" [data]=\"bi\" promoteId=\"ID\"> </mgl-geojson-source>\n\n    <mgl-layer\n      id=\"borders-unlocked\"\n      type=\"fill\"\n      source=\"borders\"\n      [paint]=\"{\n        'fill-antialias': true,\n        'fill-color': ['match', ['get', 'unlockedArea'], 'Y', '#e11d48', '#000000'],\n        'fill-opacity': ['match', ['get', 'unlockedArea'], 'Y', 0.7, 0.1],\n      }\"\n    />\n    <mgl-layer\n      id=\"borders-clickable\"\n      type=\"fill\"\n      source=\"borders\"\n      (layerClick)=\"onLayerClick($event)\"\n      [paint]=\"{\n        'fill-opacity': 0,\n      }\"\n    />\n    <mgl-layer\n      id=\"borders-selected\"\n      type=\"fill\"\n      source=\"borders\"\n      [filter]=\"bordersSelectedFilter()\"\n      [paint]=\"{\n        'fill-opacity': 0.5,\n      }\"\n    />\n    <mgl-layer\n      id=\"borders-lines\"\n      type=\"line\"\n      source=\"borders\"\n      [paint]=\"{\n        'line-color': '#400',\n        'line-width': ['interpolate', ['linear'], ['zoom'], 8, 0, 16, 3],\n      }\"\n    />\n  }\n</mgl-map>\n"
        },
        {
            "name": "MapPopupComponent",
            "id": "component-MapPopupComponent-735bd7e20989a98c42c30a7c86b7575d9e032a33fc478af58c4d027f7e3b15b8f9362ca0d6b636c7aa33a404a1d1afd5dbfe913f1194bd90ecd516444ef0bd34",
            "file": "src/app/components/map-popup/map-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-popup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map-popup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "exit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "admSvc",
                    "defaultValue": "inject(AdmService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "authSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "coaLink",
                    "defaultValue": "computed(() => {\n    const regionInfo = this.regionInfo();\n    if (regionInfo) {\n      if (regionInfo.coa_link) {\n        return environment.coaBaseUrl + regionInfo.coa_link;\n      }\n    }\n    return undefined;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "ef1",
                    "defaultValue": "effect(() => {\n    console.log('COA', this.coaLink());\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "escapeMnppEffect",
                    "defaultValue": "effect(() => {\n    const regionInfo = this.regionInfo();\n    if (regionInfo && regionInfo.only_child) {\n      this.switchToParent();\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "regionId",
                    "defaultValue": "model<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "regionInfo",
                    "defaultValue": "computed(() => {\n    const regionId = this.regionId();\n    if (regionId) {\n      return this.admSvc.getAdmInfo(regionId.replace('PL', ''));\n    }\n    return undefined;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "regionsSvc",
                    "defaultValue": "inject(RegionsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subtypeInfoExt",
                    "defaultValue": "computed(() => {\n    if (this.regionInfo()?.subtypeDigit) {\n      switch (this.regionInfo()?.subtypeDigit) {\n        case 1:\n          return 'gmina miejska';\n        case 2:\n          return 'gmina wiejska';\n        case 3:\n          return 'gmina miejsko-wiejska';\n        default:\n          return undefined;\n      }\n    } else if (this.regionInfo()?.type === 'POW' && this.regionInfo()?.has_one_child) {\n      return 'miasto powiat';\n    } else {\n      return undefined;\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "typeInfoExt",
                    "defaultValue": "computed(() => {\n    switch (this.regionInfo()?.type) {\n      case 'PAN':\n        return 'państwo';\n      case 'POW':\n        return 'powiat';\n      case 'GMI':\n        return 'gmina';\n      case 'WOJ':\n        return 'województwo';\n      default:\n        return '';\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "visitInfo",
                    "defaultValue": "injectQuery(() => ({\n    queryKey: ['visitInfo', this.regionId()],\n    queryFn: () => lastValueFrom(this.regionsSvc.unlockedRegionDetail(this.regionId()!)),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    enabled: this.authSvc.isLoggedIn() && !!this.regionId(),\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "closeBtnPressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchToParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BtnDirective",
                    "type": "directive"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, effect, EventEmitter, inject, model, Output } from '@angular/core';\nimport { AdmService } from '../../services/adm.service';\nimport { environment } from '../../../environments/environment';\nimport { BtnDirective } from '../../common-components/btn.directive';\nimport { injectQuery } from '@tanstack/angular-query-experimental';\nimport { RegionsService } from '../../services/regions.service';\nimport { lastValueFrom } from 'rxjs';\nimport { DatePipe } from '@angular/common';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-map-popup',\n  imports: [BtnDirective, DatePipe],\n  templateUrl: './map-popup.component.html',\n})\nexport class MapPopupComponent {\n  @Output() exit = new EventEmitter();\n\n  admSvc = inject(AdmService);\n  regionsSvc = inject(RegionsService);\n  authSvc = inject(AuthService);\n\n  regionId = model<string | undefined>(undefined);\n\n  regionInfo = computed(() => {\n    const regionId = this.regionId();\n    if (regionId) {\n      return this.admSvc.getAdmInfo(regionId.replace('PL', ''));\n    }\n    return undefined;\n  });\n\n  visitInfo = injectQuery(() => ({\n    queryKey: ['visitInfo', this.regionId()],\n    queryFn: () => lastValueFrom(this.regionsSvc.unlockedRegionDetail(this.regionId()!)),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    enabled: this.authSvc.isLoggedIn() && !!this.regionId(),\n  }));\n\n  coaLink = computed(() => {\n    const regionInfo = this.regionInfo();\n    if (regionInfo) {\n      if (regionInfo.coa_link) {\n        return environment.coaBaseUrl + regionInfo.coa_link;\n      }\n    }\n    return undefined;\n  });\n\n  typeInfoExt = computed(() => {\n    switch (this.regionInfo()?.type) {\n      case 'PAN':\n        return 'państwo';\n      case 'POW':\n        return 'powiat';\n      case 'GMI':\n        return 'gmina';\n      case 'WOJ':\n        return 'województwo';\n      default:\n        return '';\n    }\n  });\n\n  subtypeInfoExt = computed(() => {\n    if (this.regionInfo()?.subtypeDigit) {\n      switch (this.regionInfo()?.subtypeDigit) {\n        case 1:\n          return 'gmina miejska';\n        case 2:\n          return 'gmina wiejska';\n        case 3:\n          return 'gmina miejsko-wiejska';\n        default:\n          return undefined;\n      }\n    } else if (this.regionInfo()?.type === 'POW' && this.regionInfo()?.has_one_child) {\n      return 'miasto powiat';\n    } else {\n      return undefined;\n    }\n  });\n\n  escapeMnppEffect = effect(() => {\n    const regionInfo = this.regionInfo();\n    if (regionInfo && regionInfo.only_child) {\n      this.switchToParent();\n    }\n  });\n\n  ef1 = effect(() => {\n    console.log('COA', this.coaLink());\n  });\n\n  closeBtnPressed() {\n    this.exit.emit();\n  }\n\n  switchToParent() {\n    const regionId = this.regionId();\n    if (regionId) {\n      const length = regionId.length;\n      switch (length) {\n        case 4:\n          this.regionId.set('PL');\n          break;\n        case 6:\n          this.regionId.set(regionId.substring(0, 4));\n          break;\n        case 9:\n          this.regionId.set(regionId.substring(0, 6));\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"w-full rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800\"\n>\n  <div class=\"flex justify-between gap-2\">\n    <div>\n      <h2 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">\n        {{ regionInfo()?.name }}\n      </h2>\n      <h3 class=\"mb-2 text-lg font-semibold text-gray-700\">\n        @if (subtypeInfoExt(); as subtypeInfo) {\n          {{ subtypeInfo }}\n        } @else {\n          {{ typeInfoExt() }}\n        }\n      </h3>\n    </div>\n    <img\n      class=\"h-auto max-h-20 min-h-20 w-auto max-w-20 min-w-20 object-contain\"\n      [class.opacity-50]=\"!coaLink()\"\n      [src]=\"coaLink() ?? '/assets/placeholders/coa-unknown-raw.svg'\"\n      [alt]=\"'Herb ' + regionInfo()?.name\"\n    />\n  </div>\n\n  @if (regionInfo(); as regionInfo) {\n    <div class=\"mb-3 font-normal text-gray-700 dark:text-gray-400\">\n      <ul>\n        @if (authSvc.isLoggedIn()) {\n          @if (visitInfo.isSuccess()) {\n            <li>Liczba aktywności: {{ visitInfo.data().visitedCount }}</li>\n            @if (visitInfo.data().lastVisited) {\n              <li class=\"text-strava font-bold\">\n                <a\n                  href=\"https://www.strava.com/activities/{{ visitInfo.data().lastActivityId }}\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Ostatnia aktywność: {{ visitInfo.data().lastVisited | date: \"YYYY-MM-dd\" }}\n                </a>\n              </li>\n            }\n          }\n          @if (visitInfo.isLoading()) {\n            <li>Liczba aktywności: ...</li>\n          }\n          @if (visitInfo.isError()) {\n            <li>Liczba aktywności: Błąd</li>\n          }\n        }\n\n        <li>Powierzchnia: {{ regionInfo.area }} km<sup>2</sup></li>\n        <li>Populacja: {{ regionInfo.population }}</li>\n      </ul>\n    </div>\n  }\n\n  <div class=\"flex flex-row items-start justify-end gap-2\">\n    <button appBtn (click)=\"switchToParent()\">Wyżej</button>\n    <button appBtn (click)=\"closeBtnPressed()\" main>Zamknij</button>\n  </div>\n</div>\n"
        },
        {
            "name": "MapUiComponent",
            "id": "component-MapUiComponent-90f3b46dc46e9e05209258c30ec58e80e7416349bd4b5ea35170c277790e4baeeec5d649eee1716c291674d4867cd56c889dced15a1e65e43eb7a94ba48a044b",
            "file": "src/app/pages/map-ui/map-ui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map-ui",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map-ui.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "admSvc",
                    "defaultValue": "inject(AdmService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "bordersSvc",
                    "defaultValue": "inject(BordersService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dataAvailable",
                    "defaultValue": "computed(() => this.admSvc.isAvailable() && this.bordersSvc.isAvailable())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "ef1",
                    "defaultValue": "effect(() => {\n    console.log('selectedRegionId', this.selectedRegionId());\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loadProgressPercent",
                    "defaultValue": "computed(() => {\n    const lp1 = this.admSvc.loadProgress();\n    const lp2 = this.bordersSvc.loadProgress();\n    if (lp1 && lp2) {\n      return Math.round(((lp1.loaded + lp2.loaded) / (lp1.total + lp2.total)) * 100);\n    } else {\n      return undefined;\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loggerSvc",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'LoginPurgatory' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedRegionId",
                    "defaultValue": "signal<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "showPopup",
                    "defaultValue": "computed(() => this.selectedRegionId() !== undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "userStateSvc",
                    "defaultValue": "inject(UserStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unassignRegionId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MapLibreComponent",
                    "type": "component"
                },
                {
                    "name": "MapPopupComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressComponent",
                    "type": "component"
                },
                {
                    "name": "FirstLoginModalComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, effect, inject, OnInit, signal } from '@angular/core';\nimport { MapLibreComponent } from '../../components/map-libre/map-libre.component';\nimport { MapPopupComponent } from '../../components/map-popup/map-popup.component';\nimport { AdmService } from '../../services/adm.service';\nimport { BordersService } from '../../services/borders.service';\nimport { ProgressComponent } from '../../common-components/progress/progress.component';\nimport { FirstLoginModalComponent } from '../../components/first-login-modal/first-login-modal.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { UserStateService } from '../../services/user-state.service';\n\n@Component({\n  selector: 'app-map-ui',\n  imports: [MapLibreComponent, MapPopupComponent, ProgressComponent, FirstLoginModalComponent],\n  templateUrl: './map-ui.component.html',\n})\nexport class MapUiComponent implements OnInit {\n  admSvc = inject(AdmService);\n  bordersSvc = inject(BordersService);\n  route = inject(ActivatedRoute);\n  userStateSvc = inject(UserStateService);\n  loggerSvc = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'LoginPurgatory' },\n  });\n\n  selectedRegionId = signal<string | undefined>(undefined);\n\n  loadProgressPercent = computed(() => {\n    const lp1 = this.admSvc.loadProgress();\n    const lp2 = this.bordersSvc.loadProgress();\n    if (lp1 && lp2) {\n      return Math.round(((lp1.loaded + lp2.loaded) / (lp1.total + lp2.total)) * 100);\n    } else {\n      return undefined;\n    }\n  });\n\n  dataAvailable = computed(() => this.admSvc.isAvailable() && this.bordersSvc.isAvailable());\n\n  showPopup = computed(() => this.selectedRegionId() !== undefined);\n  ef1 = effect(() => {\n    console.log('selectedRegionId', this.selectedRegionId());\n  });\n\n  unassignRegionId() {\n    this.selectedRegionId.set(undefined);\n  }\n\n  ngOnInit(): void {\n    this.admSvc.startDownload();\n    this.bordersSvc.startDownload();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"h-full\">\n  <div\n    class=\"grid h-full grid-cols-1 place-content-center place-items-center justify-items-center gap-4\"\n    [class.hidden]=\"dataAvailable()\"\n  >\n    <app-progress [progress]=\"this.loadProgressPercent()\" class=\"w-9/12\"></app-progress>\n    <span>Ładowanie...</span>\n  </div>\n  <app-map-libre class=\"h-full\" [class.hidden]=\"!dataAvailable()\" [(regionId)]=\"selectedRegionId\" />\n\n  @if (showPopup()) {\n    <div>\n      <div\n        class=\"fixed right-0 bottom-0 max-h-full p-2 2xl:right-[calc((100%-1536px)/2)] portrait:w-full portrait:sm:w-1/2 landscape:w-2/5 landscape:lg:w-1/3 landscape:xl:w-1/4\"\n      >\n        <app-map-popup\n          class=\"block h-full\"\n          (exit)=\"unassignRegionId()\"\n          [(regionId)]=\"selectedRegionId\"\n        />\n      </div>\n    </div>\n  }\n  <app-first-login-modal [isOpen]=\"userStateSvc.isFirstLogin()\"></app-first-login-modal>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProgressComponent",
            "id": "component-ProgressComponent-64a119d72de116fc619ddea56f33964d608aaf7a728d1957ed4cacf12bbfd1738130b28a5caec6b457f7d45095a34b7b0edb8ca640b0ea644fe62eb8105bf88a",
            "file": "src/app/common-components/progress/progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./progress.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barStyle",
                    "defaultValue": "computed(() => {\n    if (this.progress() === undefined) {\n      return {};\n    }\n    const percent = Math.max(0, Math.min(100, this.progress() || 0));\n    return { width: `${percent}%` };\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isIndeterminate",
                    "defaultValue": "computed(() => this.progress() === undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "progress",
                    "defaultValue": "input<number | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, input } from '@angular/core';\n\n@Component({\n  selector: 'app-progress',\n  imports: [],\n  templateUrl: './progress.component.html',\n})\nexport class ProgressComponent {\n  progress = input<number | undefined>(undefined);\n  isIndeterminate = computed(() => this.progress() === undefined);\n  barStyle = computed(() => {\n    if (this.progress() === undefined) {\n      return {};\n    }\n    const percent = Math.max(0, Math.min(100, this.progress() || 0));\n    return { width: `${percent}%` };\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"h-4 w-full rounded-full bg-gray-200 dark:bg-gray-700\">\n  @if (isIndeterminate()) {\n    <div class=\"bg-striped bg-primary-600 h-full w-full animate-pulse rounded-full\"></div>\n  } @else {\n    <div\n      class=\"bg-primary-600 text-primary-50 h-full rounded-full p-0.5 text-center text-xs leading-none font-medium transition-transform\"\n      [style]=\"barStyle()\"\n    >\n      {{ progress() }}%\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "StravaBtnComponent",
            "id": "component-StravaBtnComponent-24e320f3485e00ea404e87cdd8cc07741c28f3268659529d6b760b88a6b90d63358acb0cdbe7a64ad0775bda4299fc55c00d99f33fdf35a4ff7edf90958f486f",
            "file": "src/app/common-components/strava-btn/strava-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-strava-btn",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./strava-btn.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "grow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "defaultValue": "'flex h-12'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "grow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                },
                {
                    "name": "stravaAuthSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'flex h-12'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class.grow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, inject, input } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-strava-btn',\n  imports: [],\n  templateUrl: './strava-btn.component.html',\n  providers: [],\n})\nexport class StravaBtnComponent {\n  stravaAuthSvc = inject(AuthService);\n  @HostBinding('class') class = 'flex h-12';\n  grow = input(false);\n  @HostBinding('class.grow') get growClass() {\n    return this.grow;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "growClass": {
                    "name": "growClass",
                    "getSignature": {
                        "name": "growClass",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<button\n  type=\"button\"\n  class=\"bg-strava flex h-full grow items-center justify-center rounded-md text-white transition-opacity duration-500 hover:opacity-50\"\n  [class.grow]=\"grow()\"\n  (click)=\"stravaAuthSvc.logIn()\"\n>\n  <img\n    src=\"assets/strava/login-orange.svg\"\n    alt=\"Connect with strava\"\n    tabindex=\"-1\"\n    class=\"h-full\"\n  />\n</button>\n"
        },
        {
            "name": "UserPageComponent",
            "id": "component-UserPageComponent-5dc1b3e7e8293ebad9dea2a0402a8b65e19d0df4971a7ff4ffa34ca628c82edc51d3084c3c7f08719e1a0da335ab6d612cb07b8b3d8344d48d21f2a41dee4dd6",
            "file": "src/app/pages/user-page/user-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BtnDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "ImportDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BtnDirective } from '../../common-components/btn.directive';\nimport { RouterLink } from '@angular/router';\nimport { ImportDialogComponent } from '../../components/import-dialog/import-dialog.component';\n\n@Component({\n  selector: 'app-user-page',\n  imports: [BtnDirective, RouterLink, ImportDialogComponent],\n  templateUrl: './user-page.component.html',\n  styleUrl: './user-page.component.css',\n})\nexport class UserPageComponent {}\n",
            "styleUrl": "./user-page.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"mx-auto max-w-(--breakpoint-md) items-center justify-between px-2 py-2 md:py-12\">\n  <h2 class=\"py-4 text-4xl font-extrabold dark:text-white\">Opcje użytkownika</h2>\n  <hr class=\"py-4\" />\n\n  <h3 class=\"py-4 text-3xl font-bold dark:text-white\">Import aktywności</h3>\n  <app-import-dialog class=\"my-2\" [includeCloseOption]=\"false\" />\n  <hr class=\"py-4\" />\n  <div class=\"flex justify-end\">\n    <a appBtn routerLink=\"/home\">Powrót</a>\n  </div>\n</div>\n"
        },
        {
            "name": "WelcomeScreenComponent",
            "id": "component-WelcomeScreenComponent-5d6d60ff2ba2d1f170618fc6d7411ec73a5e2d3fea6d9ef8fe1e6b4b4bebcfb91e3824d9eebd41631e4c1c774f6b118ba29a3b6cd84bb5f62d2a171e026e4b9b",
            "file": "src/app/pages/welcome-screen/welcome-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideIcons({ tablerMap })"
                }
            ],
            "selector": "app-welcome-screen",
            "styleUrls": [
                "./welcome-screen.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logger",
                    "defaultValue": "inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'WelcomeScreen' },\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "routerSvc",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stravaAuthSvc",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "loginClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "StravaBtnComponent",
                    "type": "component"
                },
                {
                    "name": "BtnDirective",
                    "type": "directive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { CustomNGXLoggerService } from 'ngx-logger';\nimport { StravaBtnComponent } from '../../common-components/strava-btn/strava-btn.component';\nimport { Router, RouterLink } from '@angular/router';\nimport { BtnDirective } from '../../common-components/btn.directive';\nimport { NgIcon, provideIcons } from '@ng-icons/core';\nimport { tablerMap } from '@ng-icons/tabler-icons';\n\n@Component({\n  selector: 'app-welcome-screen',\n  imports: [StravaBtnComponent, BtnDirective, RouterLink, NgIcon],\n  providers: [provideIcons({ tablerMap })],\n  templateUrl: './welcome-screen.component.html',\n  styleUrls: ['./welcome-screen.component.css'],\n})\nexport class WelcomeScreenComponent {\n  logger = inject(CustomNGXLoggerService).getNewInstance({\n    partialConfig: { context: 'WelcomeScreen' },\n  });\n\n  routerSvc = inject(Router);\n\n  stravaAuthSvc = inject(AuthService);\n\n  loginClick() {\n    this.logger.info('Login clicked');\n    this.stravaAuthSvc.logIn();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rg-background {\n  background-image: url(\"/assets/background.webp\");\n  /* background-color: red; */\n}\n",
                    "styleUrl": "./welcome-screen.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"rg-background flex h-full items-center justify-center bg-cover bg-fixed bg-center\">\n  <div class=\"px-8\">\n    <div\n      class=\"flex max-w-xl flex-col items-center overflow-x-hidden rounded-lg border border-gray-200 bg-white p-6 shadow-sm md:max-w-3xl dark:border-gray-700 dark:bg-gray-800\"\n    >\n      <img src=\"assets/logos/logo-h.svg\" class=\"h-10 md:h-16\" alt=\"Rowerowe Gminy Logo\" />\n      <h5 class=\"mb-2 text-lg font-semibold tracking-tight text-gray-900 dark:text-white\">\n        🚧🏗️⚒️ W BUDOWIE 🚧🏗️⚒️\n      </h5>\n      <p class=\"mb-3 font-normal text-gray-500 dark:text-gray-400\">\n        Rowerowe Gminy to aplikacja pozwalająca zobaczyć, które gminy w Polsce odwiedziłeś na\n        rowerze. Twój postęp będzie śledzony automatycznie, dzięki integracji z serwisem Strava.\n        Poniższy przycisk pozwoli Ci połączyć swoje konto Strava z aplikacją. (Wktórce)\n      </p>\n      <div class=\"flex flex-row flex-wrap items-center gap-2\">\n        <app-strava-btn [grow]=\"true\" />\n        <a routerLink=\"/home\" appBtn class=\"grow\">\n          <div class=\"h-7 w-7\"><ng-icon name=\"tablerMap\" /></div>\n          <span>Demo</span>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-7f4a3a58281c842af46cae8684fb86a7fe83352b6e46ac6a4b720498ebd4d92e78d05b399f787165befbc66f198a26248a764dfa05c490c9b405bc475a08b667",
            "description": "<p>Module that provides all services and configuration.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/api/api.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ApiModule>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { HealthService } from './services/health.service';\nimport { AuthService } from './services/auth.service';\nimport { RegionsService } from './services/regions.service';\nimport { ActivitiesService } from './services/activities.service';\nimport { AthletesService } from './services/athletes.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    HealthService,\n    AuthService,\n    RegionsService,\n    ActivitiesService,\n    AthletesService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ActivitiesService"
                        },
                        {
                            "name": "ApiConfiguration"
                        },
                        {
                            "name": "AthletesService"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "HealthService"
                        },
                        {
                            "name": "RegionsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    importProvidersFrom(LoggerModule.forRoot({ level: environment.loggerLevel })),\n    importProvidersFrom(ApiModule.forRoot({ rootUrl: environment.apiBaseUrl })),\n    provideNgIconsConfig({ size: '100%' }),\n    provideTanStackQuery(new QueryClient()),\n  ],\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  admInfoUrl: '/static/combo.json.gz',\n  borderInfoUrl: '/static/topo.json.gz',\n  coaBaseUrl: '/static/coa/',\n  loggerLevel: NgxLoggerLevel.DEBUG,\n  clientId: '133568',\n  localBaseUrl: 'http://localhost:4200/',\n  apiBaseUrl: 'http://localhost:8000',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  admInfoUrl: '/static/combo.json.gz',\n  borderInfoUrl: '/static/topo.json.gz',\n  coaBaseUrl: '/static/coa/',\n  loggerLevel: NgxLoggerLevel.WARN,\n  clientId: '133568',\n  localBaseUrl: 'https://rowerowegminy.pl/',\n  apiBaseUrl: 'https://api.rowerowegminy.pl',\n}"
            },
            {
                "name": "ParameterCodecInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/request-builder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ParameterCodec()"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'authToken'"
            }
        ],
        "functions": [
            {
                "name": "apiUserUserIdUnlockedGetUserUnlocked",
                "file": "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<Array<string>>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "authenticateAuthenticate",
                "file": "src/app/api/fn/operations/authenticate-authenticate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "AuthenticateAuthenticate$Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<StravaAuthResponse>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "AuthenticateAuthenticate$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "authInterceptor",
                "file": "src/app/utils/auth-interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "backlogActivitiesBacklogPost",
                "file": "src/app/api/fn/activities/backlog-activities-backlog-post.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "BacklogActivitiesBacklogPost$Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<string>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "BacklogActivitiesBacklogPost$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLoggedInUserAthletesMeGet",
                "file": "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "GetLoggedInUserAthletesMeGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<AthleteDetail>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "GetLoggedInUserAthletesMeGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "gunzip",
                "file": "src/app/utils/gunzip.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "input",
                        "type": "Blob",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T | undefined>",
                "jsdoctags": [
                    {
                        "name": "input",
                        "type": "Blob",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hcHcHandler",
                "file": "src/app/api/fn/internals/hc-hc-handler.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "HcHcHandler$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<string>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "HcHcHandler$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "healthHealthGet",
                "file": "src/app/api/fn/health/health-health-get.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "HealthHealthGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<any>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "HealthHealthGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loginLoginPost",
                "file": "src/app/api/fn/auth/login-login-post.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "LoginLoginPost$Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<LoginResponse>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "LoginLoginPost$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "rateLimitsRateLimitsHandler",
                "file": "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "RateLimitsRateLimitsHandler$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<null | RateLimitSet>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "RateLimitsRateLimitsHandler$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "readableStreamToObservable",
                "file": "src/app/utils/gunzip.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "stream",
                        "type": "ReadableStream",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<string>",
                "jsdoctags": [
                    {
                        "name": "stream",
                        "type": "ReadableStream",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unlockedDetailRegionsUnlockedRegionIdGet",
                "file": "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<UnlockedRegionDetail>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "unlockedRegionsUnlockedGet",
                "file": "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "UnlockedRegionsUnlockedGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<StrictHttpResponse<Array<UnlockedRegion>>>",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "UnlockedRegionsUnlockedGet$Params",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "HttpContext",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AlertType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warning\" | \"danger\" | \"standard\"",
                "file": "src/app/common-components/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ColorType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"accent\"",
                "file": "src/app/common-components/params.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "StrictHttpResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/api/strict-http-response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                "kind": 193
            }
        ],
        "enumerations": [
            {
                "name": "LoginErrorCause",
                "childs": [
                    {
                        "name": "InvalidScope",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invalid_scope"
                    },
                    {
                        "name": "InvalidCode",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invalid_code"
                    },
                    {
                        "name": "StravaError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "strava_error"
                    },
                    {
                        "name": "InternalError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "internal_error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/api/models/login-error-cause.ts"
            },
            {
                "name": "StravaScopes",
                "childs": [
                    {
                        "name": "Read",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "read"
                    },
                    {
                        "name": "ReadAll",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "read_all"
                    },
                    {
                        "name": "ProfileReadAll",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "profile:read_all"
                    },
                    {
                        "name": "ProfileWrite",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "profile:write"
                    },
                    {
                        "name": "ActivityRead",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "activity:read"
                    },
                    {
                        "name": "ActivityReadAll",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "activity:read_all"
                    },
                    {
                        "name": "ActivityWrite",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "activity:write"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/api/models/strava-scopes.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    importProvidersFrom(LoggerModule.forRoot({ level: environment.loggerLevel })),\n    importProvidersFrom(ApiModule.forRoot({ rootUrl: environment.apiBaseUrl })),\n    provideNgIconsConfig({ size: '100%' }),\n    provideTanStackQuery(new QueryClient()),\n  ],\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  admInfoUrl: '/static/combo.json.gz',\n  borderInfoUrl: '/static/topo.json.gz',\n  coaBaseUrl: '/static/coa/',\n  loggerLevel: NgxLoggerLevel.DEBUG,\n  clientId: '133568',\n  localBaseUrl: 'http://localhost:4200/',\n  apiBaseUrl: 'http://localhost:8000',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  admInfoUrl: '/static/combo.json.gz',\n  borderInfoUrl: '/static/topo.json.gz',\n  coaBaseUrl: '/static/coa/',\n  loggerLevel: NgxLoggerLevel.WARN,\n  clientId: '133568',\n  localBaseUrl: 'https://rowerowegminy.pl/',\n  apiBaseUrl: 'https://api.rowerowegminy.pl',\n}"
                }
            ],
            "src/app/api/request-builder.ts": [
                {
                    "name": "ParameterCodecInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/request-builder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ParameterCodec()"
                }
            ],
            "src/app/services/auth.service.ts": [
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'authToken'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts": [
                {
                    "name": "apiUserUserIdUnlockedGetUserUnlocked",
                    "file": "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<Array<string>>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/operations/authenticate-authenticate.ts": [
                {
                    "name": "authenticateAuthenticate",
                    "file": "src/app/api/fn/operations/authenticate-authenticate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "AuthenticateAuthenticate$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<StravaAuthResponse>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "AuthenticateAuthenticate$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/auth-interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "file": "src/app/utils/auth-interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/activities/backlog-activities-backlog-post.ts": [
                {
                    "name": "backlogActivitiesBacklogPost",
                    "file": "src/app/api/fn/activities/backlog-activities-backlog-post.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "BacklogActivitiesBacklogPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts": [
                {
                    "name": "getLoggedInUserAthletesMeGet",
                    "file": "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<AthleteDetail>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "GetLoggedInUserAthletesMeGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/gunzip.ts": [
                {
                    "name": "gunzip",
                    "file": "src/app/utils/gunzip.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "input",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T | undefined>",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readableStreamToObservable",
                    "file": "src/app/utils/gunzip.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "stream",
                            "type": "ReadableStream",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<string>",
                    "jsdoctags": [
                        {
                            "name": "stream",
                            "type": "ReadableStream",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/internals/hc-hc-handler.ts": [
                {
                    "name": "hcHcHandler",
                    "file": "src/app/api/fn/internals/hc-hc-handler.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HcHcHandler$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HcHcHandler$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/health/health-health-get.ts": [
                {
                    "name": "healthHealthGet",
                    "file": "src/app/api/fn/health/health-health-get.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<any>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "HealthHealthGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/auth/login-login-post.ts": [
                {
                    "name": "loginLoginPost",
                    "file": "src/app/api/fn/auth/login-login-post.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<LoginResponse>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "LoginLoginPost$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts": [
                {
                    "name": "rateLimitsRateLimitsHandler",
                    "file": "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "RateLimitsRateLimitsHandler$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<null | RateLimitSet>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "RateLimitsRateLimitsHandler$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts": [
                {
                    "name": "unlockedDetailRegionsUnlockedRegionIdGet",
                    "file": "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<UnlockedRegionDetail>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts": [
                {
                    "name": "unlockedRegionsUnlockedGet",
                    "file": "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<StrictHttpResponse<Array<UnlockedRegion>>>",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "UnlockedRegionsUnlockedGet$Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "HttpContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/api/models/login-error-cause.ts": [
                {
                    "name": "LoginErrorCause",
                    "childs": [
                        {
                            "name": "InvalidScope",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invalid_scope"
                        },
                        {
                            "name": "InvalidCode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invalid_code"
                        },
                        {
                            "name": "StravaError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "strava_error"
                        },
                        {
                            "name": "InternalError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "internal_error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/api/models/login-error-cause.ts"
                }
            ],
            "src/app/api/models/strava-scopes.ts": [
                {
                    "name": "StravaScopes",
                    "childs": [
                        {
                            "name": "Read",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "read"
                        },
                        {
                            "name": "ReadAll",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "read_all"
                        },
                        {
                            "name": "ProfileReadAll",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "profile:read_all"
                        },
                        {
                            "name": "ProfileWrite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "profile:write"
                        },
                        {
                            "name": "ActivityRead",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "activity:read"
                        },
                        {
                            "name": "ActivityReadAll",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "activity:read_all"
                        },
                        {
                            "name": "ActivityWrite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "activity:write"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/api/models/strava-scopes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/common-components/alert/alert.component.ts": [
                {
                    "name": "AlertType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warning\" | \"danger\" | \"standard\"",
                    "file": "src/app/common-components/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/common-components/params.ts": [
                {
                    "name": "ColorType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"accent\"",
                    "file": "src/app/common-components/params.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/api/strict-http-response.ts": [
                {
                    "name": "StrictHttpResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/api/strict-http-response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                    "kind": 193
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 8,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiConfigurationParams",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/base-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/fn/activities/backlog-activities-backlog-post.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BacklogActivitiesBacklogPost$Params",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/activities/backlog-activities-backlog-post.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "backlogActivitiesBacklogPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetLoggedInUserAthletesMeGet$Params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/athletes/get-logged-in-user-athletes-me-get.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLoggedInUserAthletesMeGet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/auth/login-login-post.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginLoginPost$Params",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/auth/login-login-post.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loginLoginPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/health/health-health-get.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HealthHealthGet$Params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/health/health-health-get.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "healthHealthGet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/internals/hc-hc-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HcHcHandler$Params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/internals/hc-hc-handler.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hcHcHandler",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RateLimitsRateLimitsHandler$Params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/internals/rate-limits-rate-limits-handler.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "rateLimitsRateLimitsHandler",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/operations/authenticate-authenticate.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthenticateAuthenticate$Params",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/operations/authenticate-authenticate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authenticateAuthenticate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UnlockedDetailRegionsUnlockedRegionIdGet$Params",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/regions/unlocked-detail-regions-unlocked-region-id-get.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unlockedDetailRegionsUnlockedRegionIdGet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UnlockedRegionsUnlockedGet$Params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/regions/unlocked-regions-unlocked-get.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "unlockedRegionsUnlockedGet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiUserUserIdUnlockedGetUserUnlocked$Params",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/fn/user/api-user-user-id-unlocked-get-user-unlocked.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "apiUserUserIdUnlockedGetUserUnlocked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/athlete-detail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AthleteDetail",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/backlog-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BacklogRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/http-validation-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/login-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/login-response-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponseError",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/login-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/unlocked-region-detail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UnlockedRegionDetail",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/unlocked-region.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UnlockedRegion",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/validation-error.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Parameter",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParameterCodec",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RequestBuilder",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ParameterOptions",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ParameterCodecInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/activities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivitiesService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/services/athletes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AthletesService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/services/health.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HealthService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/services/regions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegionsService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/api/strict-http-response.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StrictHttpResponse",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/alert/alert.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AlertType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/btn.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BtnDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/params.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ColorType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/progress/progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/strava-btn/strava-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StravaBtnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/first-login-modal/first-login-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FirstLoginModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/import-dialog/import-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-layout/main-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/map-libre/map-libre.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapLibreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/map-popup/map-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/remove-query-params.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RemoveQueryParamsGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/adm-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdmInfo",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/models/athlete.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Athlete",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/geo-ext.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NamedFeatureCollection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/loading_info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/map-display-settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MapDisplaySettings",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StravaInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-purgatory/login-purgatory.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPurgatoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/map-ui/map-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapUiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user-page/user-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/welcome-screen/welcome-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/adm.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdmService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/services/athlete.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AthleteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResposeErr",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResposeOK",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/borders.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BordersService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/geo-feature-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GeoFeatureDataService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/map-display.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapDisplayService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/regions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegionsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserStateService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/auth-interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/gunzip.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gunzip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/gunzip.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "readableStreamToObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}